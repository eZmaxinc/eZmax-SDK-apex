/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * A Ezsignfoldertype Object
 */
public class OASEzsignfoldertypeRequest {
    /**
     * The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return pkiEzsignfoldertypeID
     */
    public Integer pkiEzsignfoldertypeID { get; set; }

    /**
     * Get objEzsignfoldertypeName
     * @return objEzsignfoldertypeName
     */
    public OASMultilingualEzsignfoldertypeName objEzsignfoldertypeName { get; set; }

    /**
     * The unique ID of the Branding
     * minimum: 0
     * @return fkiBrandingID
     */
    public Integer fkiBrandingID { get; set; }

    /**
     * The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return fkiBillingentityinternalID
     */
    public Integer fkiBillingentityinternalID { get; set; }

    /**
     * The unique ID of the Usergroup
     * minimum: 0
     * @return fkiUsergroupID
     */
    public Integer fkiUsergroupID { get; set; }

    /**
     * The unique ID of the Usergroup
     * minimum: 0
     * @return fkiUsergroupIDRestricted
     */
    public Integer fkiUsergroupIDRestricted { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The email address.
     * @return sEmailAddressSigned
     */
    public String sEmailAddressSigned { get; set; }

    /**
     * The email address.
     * @return sEmailAddressSummary
     */
    public String sEmailAddressSummary { get; set; }

    /**
     * Get eEzsignfoldertypePrivacylevel
     * @return eEzsignfoldertypePrivacylevel
     */
    public OASFieldEEzsignfoldertypePrivacyleve eEzsignfoldertypePrivacylevel { get; set; }

    /**
     * Get eEzsignfoldertypeSendreminderfrequency
     * @return eEzsignfoldertypeSendreminderfrequency
     */
    public OASFieldEEzsignfoldertypeSendreminde eEzsignfoldertypeSendreminderfrequency { get; set; }

    /**
     * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * minimum: 0
     * maximum: 180
     * @return iEzsignfoldertypeArchivaldays
     */
    public Integer iEzsignfoldertypeArchivaldays { get; set; }

    /**
     * Get eEzsignfoldertypeDisposal
     * @return eEzsignfoldertypeDisposal
     */
    public OASFieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal { get; set; }

    /**
     * The number of days after the archival before the disposal of the Ezsignfolder
     * minimum: 0
     * maximum: 9999
     * @return iEzsignfoldertypeDisposaldays
     */
    public Integer iEzsignfoldertypeDisposaldays { get; set; }

    /**
     * The number of days to get all Ezsignsignatures
     * minimum: 1
     * maximum: 60
     * @return iEzsignfoldertypeDeadlinedays
     */
    public Integer iEzsignfoldertypeDeadlinedays { get; set; }

    /**
     * Whether we send the Ezsigndocument and the proof as attachment in the email
     * @return bEzsignfoldertypeSendattatchmentsigner
     */
    public Boolean bEzsignfoldertypeSendattatchmentsigner { get; set; }

    /**
     * Whether we send the signed Ezsigndocument to the Ezsigndocument\'s owner
     * @return bEzsignfoldertypeSendsignedtodocumentowner
     */
    public Boolean bEzsignfoldertypeSendsignedtodocumentowner { get; set; }

    /**
     * Whether we send the signed Ezsigndocument to the Ezsignfolder\'s owner
     * @return bEzsignfoldertypeSendsignedtofolderowner
     */
    public Boolean bEzsignfoldertypeSendsignedtofolderowner { get; set; }

    /**
     * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     * @return bEzsignfoldertypeSendsignedtofullgroup
     */
    public Boolean bEzsignfoldertypeSendsignedtofullgroup { get; set; }

    /**
     * Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     * @return bEzsignfoldertypeSendsignedtolimitedgroup
     */
    public Boolean bEzsignfoldertypeSendsignedtolimitedgroup { get; set; }

    /**
     * Whether we send the signed Ezsigndocument to the colleagues
     * @return bEzsignfoldertypeSendsignedtocolleague
     */
    public Boolean bEzsignfoldertypeSendsignedtocolleague { get; set; }

    /**
     * Whether we send the summary to the Ezsigndocument\'s owner
     * @return bEzsignfoldertypeSendsummarytodocumentowner
     */
    public Boolean bEzsignfoldertypeSendsummarytodocumentowner { get; set; }

    /**
     * Whether we send the summary to the Ezsignfolder\'s owner
     * @return bEzsignfoldertypeSendsummarytofolderowner
     */
    public Boolean bEzsignfoldertypeSendsummarytofolderowner { get; set; }

    /**
     * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     * @return bEzsignfoldertypeSendsummarytofullgroup
     */
    public Boolean bEzsignfoldertypeSendsummarytofullgroup { get; set; }

    /**
     * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     * @return bEzsignfoldertypeSendsummarytolimitedgroup
     */
    public Boolean bEzsignfoldertypeSendsummarytolimitedgroup { get; set; }

    /**
     * Whether we send the summary to the colleagues
     * @return bEzsignfoldertypeSendsummarytocolleague
     */
    public Boolean bEzsignfoldertypeSendsummarytocolleague { get; set; }

    /**
     * Whether the Ezsignfoldertype is active or not
     * @return bEzsignfoldertypeIsactive
     */
    public Boolean bEzsignfoldertypeIsactive { get; set; }

    public static OASEzsignfoldertypeRequest getExample() {
        OASEzsignfoldertypeRequest ezsignfoldertypeRequest = new OASEzsignfoldertypeRequest();
          ezsignfoldertypeRequest.pkiEzsignfoldertypeID = 5;
          ezsignfoldertypeRequest.objEzsignfoldertypeName = OASMultilingualEzsignfoldertypeName.getExample();
          ezsignfoldertypeRequest.fkiBrandingID = 78;
          ezsignfoldertypeRequest.fkiBillingentityinternalID = 1;
          ezsignfoldertypeRequest.fkiUsergroupID = 89;
          ezsignfoldertypeRequest.fkiUsergroupIDRestricted = 89;
          ezsignfoldertypeRequest.fkiEzsigntsarequirementID = 1;
          ezsignfoldertypeRequest.sEmailAddressSigned = 'email@example.com';
          ezsignfoldertypeRequest.sEmailAddressSummary = 'email@example.com';
          ezsignfoldertypeRequest.eEzsignfoldertypePrivacylevel = OASFieldEEzsignfoldertypePrivacyleve.getExample();
          ezsignfoldertypeRequest.eEzsignfoldertypeSendreminderfrequency = OASFieldEEzsignfoldertypeSendreminde.getExample();
          ezsignfoldertypeRequest.iEzsignfoldertypeArchivaldays = 30;
          ezsignfoldertypeRequest.eEzsignfoldertypeDisposal = OASFieldEEzsignfoldertypeDisposal.getExample();
          ezsignfoldertypeRequest.iEzsignfoldertypeDisposaldays = 365;
          ezsignfoldertypeRequest.iEzsignfoldertypeDeadlinedays = 5;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendattatchmentsigner = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtodocumentowner = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtofolderowner = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtofullgroup = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtolimitedgroup = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtocolleague = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytodocumentowner = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytofolderowner = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytofullgroup = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytolimitedgroup = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytocolleague = false;
          ezsignfoldertypeRequest.bEzsignfoldertypeIsactive = true;
        return ezsignfoldertypeRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignfoldertypeRequest) {           
            OASEzsignfoldertypeRequest ezsignfoldertypeRequest = (OASEzsignfoldertypeRequest) obj;
            return this.pkiEzsignfoldertypeID == ezsignfoldertypeRequest.pkiEzsignfoldertypeID
                && this.objEzsignfoldertypeName == ezsignfoldertypeRequest.objEzsignfoldertypeName
                && this.fkiBrandingID == ezsignfoldertypeRequest.fkiBrandingID
                && this.fkiBillingentityinternalID == ezsignfoldertypeRequest.fkiBillingentityinternalID
                && this.fkiUsergroupID == ezsignfoldertypeRequest.fkiUsergroupID
                && this.fkiUsergroupIDRestricted == ezsignfoldertypeRequest.fkiUsergroupIDRestricted
                && this.fkiEzsigntsarequirementID == ezsignfoldertypeRequest.fkiEzsigntsarequirementID
                && this.sEmailAddressSigned == ezsignfoldertypeRequest.sEmailAddressSigned
                && this.sEmailAddressSummary == ezsignfoldertypeRequest.sEmailAddressSummary
                && this.eEzsignfoldertypePrivacylevel == ezsignfoldertypeRequest.eEzsignfoldertypePrivacylevel
                && this.eEzsignfoldertypeSendreminderfrequency == ezsignfoldertypeRequest.eEzsignfoldertypeSendreminderfrequency
                && this.iEzsignfoldertypeArchivaldays == ezsignfoldertypeRequest.iEzsignfoldertypeArchivaldays
                && this.eEzsignfoldertypeDisposal == ezsignfoldertypeRequest.eEzsignfoldertypeDisposal
                && this.iEzsignfoldertypeDisposaldays == ezsignfoldertypeRequest.iEzsignfoldertypeDisposaldays
                && this.iEzsignfoldertypeDeadlinedays == ezsignfoldertypeRequest.iEzsignfoldertypeDeadlinedays
                && this.bEzsignfoldertypeSendattatchmentsigner == ezsignfoldertypeRequest.bEzsignfoldertypeSendattatchmentsigner
                && this.bEzsignfoldertypeSendsignedtodocumentowner == ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtodocumentowner
                && this.bEzsignfoldertypeSendsignedtofolderowner == ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtofolderowner
                && this.bEzsignfoldertypeSendsignedtofullgroup == ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtofullgroup
                && this.bEzsignfoldertypeSendsignedtolimitedgroup == ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtolimitedgroup
                && this.bEzsignfoldertypeSendsignedtocolleague == ezsignfoldertypeRequest.bEzsignfoldertypeSendsignedtocolleague
                && this.bEzsignfoldertypeSendsummarytodocumentowner == ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytodocumentowner
                && this.bEzsignfoldertypeSendsummarytofolderowner == ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytofolderowner
                && this.bEzsignfoldertypeSendsummarytofullgroup == ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytofullgroup
                && this.bEzsignfoldertypeSendsummarytolimitedgroup == ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytolimitedgroup
                && this.bEzsignfoldertypeSendsummarytocolleague == ezsignfoldertypeRequest.bEzsignfoldertypeSendsummarytocolleague
                && this.bEzsignfoldertypeIsactive == ezsignfoldertypeRequest.bEzsignfoldertypeIsactive;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignfoldertypeID == null ? 0 : System.hashCode(pkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (objEzsignfoldertypeName == null ? 0 : System.hashCode(objEzsignfoldertypeName));
        hashCode = (17 * hashCode) + (fkiBrandingID == null ? 0 : System.hashCode(fkiBrandingID));
        hashCode = (17 * hashCode) + (fkiBillingentityinternalID == null ? 0 : System.hashCode(fkiBillingentityinternalID));
        hashCode = (17 * hashCode) + (fkiUsergroupID == null ? 0 : System.hashCode(fkiUsergroupID));
        hashCode = (17 * hashCode) + (fkiUsergroupIDRestricted == null ? 0 : System.hashCode(fkiUsergroupIDRestricted));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEmailAddressSigned == null ? 0 : System.hashCode(sEmailAddressSigned));
        hashCode = (17 * hashCode) + (sEmailAddressSummary == null ? 0 : System.hashCode(sEmailAddressSummary));
        hashCode = (17 * hashCode) + (eEzsignfoldertypePrivacylevel == null ? 0 : System.hashCode(eEzsignfoldertypePrivacylevel));
        hashCode = (17 * hashCode) + (eEzsignfoldertypeSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfoldertypeSendreminderfrequency));
        hashCode = (17 * hashCode) + (iEzsignfoldertypeArchivaldays == null ? 0 : System.hashCode(iEzsignfoldertypeArchivaldays));
        hashCode = (17 * hashCode) + (eEzsignfoldertypeDisposal == null ? 0 : System.hashCode(eEzsignfoldertypeDisposal));
        hashCode = (17 * hashCode) + (iEzsignfoldertypeDisposaldays == null ? 0 : System.hashCode(iEzsignfoldertypeDisposaldays));
        hashCode = (17 * hashCode) + (iEzsignfoldertypeDeadlinedays == null ? 0 : System.hashCode(iEzsignfoldertypeDeadlinedays));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendattatchmentsigner == null ? 0 : System.hashCode(bEzsignfoldertypeSendattatchmentsigner));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsignedtodocumentowner == null ? 0 : System.hashCode(bEzsignfoldertypeSendsignedtodocumentowner));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsignedtofolderowner == null ? 0 : System.hashCode(bEzsignfoldertypeSendsignedtofolderowner));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsignedtofullgroup == null ? 0 : System.hashCode(bEzsignfoldertypeSendsignedtofullgroup));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsignedtolimitedgroup == null ? 0 : System.hashCode(bEzsignfoldertypeSendsignedtolimitedgroup));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsignedtocolleague == null ? 0 : System.hashCode(bEzsignfoldertypeSendsignedtocolleague));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsummarytodocumentowner == null ? 0 : System.hashCode(bEzsignfoldertypeSendsummarytodocumentowner));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsummarytofolderowner == null ? 0 : System.hashCode(bEzsignfoldertypeSendsummarytofolderowner));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsummarytofullgroup == null ? 0 : System.hashCode(bEzsignfoldertypeSendsummarytofullgroup));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsummarytolimitedgroup == null ? 0 : System.hashCode(bEzsignfoldertypeSendsummarytolimitedgroup));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeSendsummarytocolleague == null ? 0 : System.hashCode(bEzsignfoldertypeSendsummarytocolleague));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeIsactive == null ? 0 : System.hashCode(bEzsignfoldertypeIsactive));
        return hashCode;
    }
}

