/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class ObjectEzsignfolderApi {
    Client client;

    public ObjectEzsignfolderApi(Client client) {
        this.client = client;
    }

    public ObjectEzsignfolderApi() {
        this.client = new Client();
    }

    public Client getClient() {
        return this.client;
    }

    /**
     * Archive the Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param body  (required)
     * @return EzsignfolderArchiveV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderArchiveV1Response ezsignfolderArchiveV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderArchiveV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/archive',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderArchiveV1Response.class
        );
    }
    /**
     * Download multiples files from an Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderBatchDownloadV1Request  (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob ezsignfolderBatchDownloadV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderBatchDownloadV1Request'), 'ezsignfolderBatchDownloadV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload',
            (EzsignfolderBatchDownloadV1Request) params.get('ezsignfolderBatchDownloadV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/zip', 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            Blob.class
        );
    }
    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.\n\nThe array can contain simple (Just the object) or compound (The object and its child) objects.\n\nCreating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsignfolderCreateObjectV1Request  (required)
     * @return EzsignfolderCreateObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderCreateObjectV1Response ezsignfolderCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('ezsignfolderCreateObjectV1Request'), 'ezsignfolderCreateObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderCreateObjectV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder',
            (List<EzsignfolderCreateObjectV1Request>) params.get('ezsignfolderCreateObjectV1Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderCreateObjectV1Response.class
        );
    }
    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.
     * @param ezsignfolderCreateObjectV2Request  (required)
     * @return EzsignfolderCreateObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderCreateObjectV2Response ezsignfolderCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('ezsignfolderCreateObjectV2Request'), 'ezsignfolderCreateObjectV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderCreateObjectV2Response) client.invoke(
            'POST', '/2/object/ezsignfolder',
            (EzsignfolderCreateObjectV2Request) params.get('ezsignfolderCreateObjectV2Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderCreateObjectV2Response.class
        );
    }
    /**
     * Delete an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderDeleteObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderDeleteObjectV1Response ezsignfolderDeleteObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderDeleteObjectV1Response) client.invoke(
            'DELETE', '/1/object/ezsignfolder/{pkiEzsignfolderID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderDeleteObjectV1Response.class
        );
    }
    /**
     * Dispose Ezsignfolders
     * 
     * @param ezsignfolderDisposeEzsignfoldersV1Re  (required)
     * @return EzsignfolderDisposeEzsignfoldersV1Re
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderDisposeEzsignfoldersV1Re ezsignfolderDisposeEzsignfoldersV1(Map<String, Object> params) {
        client.assertNotNull(params.get('ezsignfolderDisposeEzsignfoldersV1Re'), 'ezsignfolderDisposeEzsignfoldersV1Re');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderDisposeEzsignfoldersV1Re) client.invoke(
            'POST', '/1/object/ezsignfolder/disposeEzsignfolders',
            (EzsignfolderDisposeEzsignfoldersV1Re) params.get('ezsignfolderDisposeEzsignfoldersV1Re'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderDisposeEzsignfoldersV1Re.class
        );
    }
    /**
     * Dispose the Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param body  (required)
     * @return EzsignfolderDisposeV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderDisposeV1Response ezsignfolderDisposeV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderDisposeV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderDisposeV1Response.class
        );
    }
    /**
     * Edit an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderEditObjectV1Request  (required)
     * @return EzsignfolderEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderEditObjectV1Response ezsignfolderEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderEditObjectV1Request'), 'ezsignfolderEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderEditObjectV1Response) client.invoke(
            'PUT', '/1/object/ezsignfolder/{pkiEzsignfolderID}',
            (EzsignfolderEditObjectV1Request) params.get('ezsignfolderEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderEditObjectV1Response.class
        );
    }
    /**
     * Retrieve actionable elements for the Ezsignfolder
     * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetActionableElementsV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetActionableElementsV1R ezsignfolderGetActionableElementsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetActionableElementsV1R) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetActionableElementsV1R.class
        );
    }
    /**
     * Retrieve Communication count
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetCommunicationCountV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetCommunicationCountV1R ezsignfolderGetCommunicationCountV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetCommunicationCountV1R) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetCommunicationCountV1R.class
        );
    }
    /**
     * Retrieve Communication list
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetCommunicationListV1Re
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetCommunicationListV1Re ezsignfolderGetCommunicationListV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetCommunicationListV1Re) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetCommunicationListV1Re.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s Ezsigndocuments
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetEzsigndocumentsV1Resp
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetEzsigndocumentsV1Resp ezsignfolderGetEzsigndocumentsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetEzsigndocumentsV1Resp) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetEzsigndocumentsV1Resp.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s Ezsignfoldersignerassociations
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetEzsignfoldersignerass
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetEzsignfoldersignerass ezsignfolderGetEzsignfoldersignerassociationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetEzsignfoldersignerass) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetEzsignfoldersignerass.class
        );
    }
    /**
     * Retrieve your own Ezsignfoldersignerassociations from an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetEzsignfoldersignerass
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetEzsignfoldersignerass ezsignfolderGetEzsignfoldersignerassociationsmineV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetEzsignfoldersignerass) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociationsmine', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetEzsignfoldersignerass.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetEzsignsignaturesAutom
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetEzsignsignaturesAutom ezsignfolderGetEzsignsignaturesAutomaticV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetEzsignsignaturesAutom) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetEzsignsignaturesAutom.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s forms data
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetFormsDataV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetFormsDataV1Response ezsignfolderGetFormsDataV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetFormsDataV1Response) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'application/zip' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetFormsDataV1Response.class
        );
    }
    /**
     * Retrieve Ezsignfolder list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|\n| eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed|\n| eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |\n\nAdvanced filters that can be used in query parameter *sFilter*:\n\n| Variable |\n|---|\n| sContactFirstname |\n| sContactLastname |\n| sEzsigndocumentName |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzsignfolderGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetListV1Response ezsignfolderGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetListV1Response) client.invoke(
            'GET', '/1/object/ezsignfolder/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (HeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetObjectV1Response ezsignfolderGetObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetObjectV1Response) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetObjectV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return EzsignfolderGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderGetObjectV2Response ezsignfolderGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderGetObjectV2Response) client.invoke(
            'GET', '/2/object/ezsignfolder/{pkiEzsignfolderID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsignfolderGetObjectV2Response.class
        );
    }
    /**
     * Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderImportEzsignfoldersigner  (required)
     * @return EzsignfolderImportEzsignfoldersigner
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderImportEzsignfoldersigner ezsignfolderImportEzsignfoldersignerassociationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderImportEzsignfoldersigner'), 'ezsignfolderImportEzsignfoldersigner');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderImportEzsignfoldersigner) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations',
            (EzsignfolderImportEzsignfoldersigner) params.get('ezsignfolderImportEzsignfoldersigner'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderImportEzsignfoldersigner.class
        );
    }
    /**
     * Import an Ezsigntemplatepackage in the Ezsignfolder.
     * This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.\n\nThis allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderImportEzsigntemplatepack  (required)
     * @return EzsignfolderImportEzsigntemplatepack
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderImportEzsigntemplatepack ezsignfolderImportEzsigntemplatepackageV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderImportEzsigntemplatepack'), 'ezsignfolderImportEzsigntemplatepack');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderImportEzsigntemplatepack) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage',
            (EzsignfolderImportEzsigntemplatepack) params.get('ezsignfolderImportEzsigntemplatepack'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderImportEzsigntemplatepack.class
        );
    }
    /**
     * Reorder Ezsigndocuments in the Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderReorderV1Request  (required)
     * @return EzsignfolderReorderV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderReorderV1Response ezsignfolderReorderV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderReorderV1Request'), 'ezsignfolderReorderV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderReorderV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder',
            (EzsignfolderReorderV1Request) params.get('ezsignfolderReorderV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderReorderV1Response.class
        );
    }
    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderSendV1Request  (required)
     * @return EzsignfolderSendV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderSendV1Response ezsignfolderSendV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderSendV1Request'), 'ezsignfolderSendV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderSendV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/send',
            (EzsignfolderSendV1Request) params.get('ezsignfolderSendV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderSendV1Response.class
        );
    }
    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderSendV2Request  (required)
     * @return EzsignfolderSendV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderSendV2Response ezsignfolderSendV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderSendV2Request'), 'ezsignfolderSendV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderSendV2Response) client.invoke(
            'POST', '/2/object/ezsignfolder/{pkiEzsignfolderID}/send',
            (EzsignfolderSendV2Request) params.get('ezsignfolderSendV2Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderSendV2Response.class
        );
    }
    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param pkiEzsignfolderID  (required)
     * @param ezsignfolderSendV3Request  (required)
     * @return EzsignfolderSendV3Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderSendV3Response ezsignfolderSendV3(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('ezsignfolderSendV3Request'), 'ezsignfolderSendV3Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderSendV3Response) client.invoke(
            'POST', '/3/object/ezsignfolder/{pkiEzsignfolderID}/send',
            (EzsignfolderSendV3Request) params.get('ezsignfolderSendV3Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderSendV3Response.class
        );
    }
    /**
     * Unsend the Ezsignfolder
     * Once an Ezsignfolder has been sent to signatories, it cannot be modified.\n\nUsing this endpoint, you can unsend the Ezsignfolder and make it modifiable again.\n\nSignatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.\n\n⚠️ Warning: Any signature previously made by signatories on &quot;Non-completed&quot; Ezsigndocuments will be lost.
     * @param pkiEzsignfolderID  (required)
     * @param body  (required)
     * @return EzsignfolderUnsendV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderUnsendV1Response ezsignfolderUnsendV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderUnsendV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsignfolderUnsendV1Response.class
        );
    }
}
