/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.8
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Payload for GET /1/object/ezsignfolder/{pkiEzsignfolderID}
 */
public class OASEzsignfolderGetObjectV1ResponseMP implements OASEzsignfolderResponseCompound {
    /**
     * The unique ID of the Ezsignfolder
     * minimum: 0
     * @return pkiEzsignfolderID
     */
    public Integer pkiEzsignfolderID { get; set; }

    /**
     * The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * The name of the Ezsignfoldertype in the language of the requester
     * @return sEzsignfoldertypeNameX
     */
    public String sEzsignfoldertypeNameX { get; set; }

    /**
     * The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return fkiBillingentityinternalID
     */
    public Integer fkiBillingentityinternalID { get; set; }

    /**
     * The description of the Billingentityinternal in the language of the requester
     * @return sBillingentityinternalDescriptionX
     */
    public String sBillingentityinternalDescriptionX { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The description of the Ezsigntsarequirement in the language of the requester
     * @return sEzsigntsarequirementDescriptionX
     */
    public String sEzsigntsarequirementDescriptionX { get; set; }

    /**
     * The description of the Ezsignfolder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * Note about the Ezsignfolder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    /**
     * If the Ezsigndocument can be disposed
     * @return bEzsignfolderIsdisposable
     */
    public Boolean bEzsignfolderIsdisposable { get; set; }

    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public OASFieldEEzsignfolderSendreminderfre eEzsignfolderSendreminderfrequency { get; set; }

    /**
     * The maximum date and time at which the Ezsignfolder can be signed.
     * @return dtEzsignfolderDuedate
     */
    public String dtEzsignfolderDuedate { get; set; }

    /**
     * The date and time at which the Ezsign folder was sent the last time.
     * @return dtEzsignfolderSentdate
     */
    public String dtEzsignfolderSentdate { get; set; }

    /**
     * The scheduled date and time at which the Ezsignfolder should be archived.
     * @return dtEzsignfolderScheduledarchive
     */
    public String dtEzsignfolderScheduledarchive { get; set; }

    /**
     * The scheduled date at which the Ezsignfolder should be Disposed.
     * @return dtEzsignfolderScheduleddispose
     */
    public String dtEzsignfolderScheduleddispose { get; set; }

    /**
     * Get eEzsignfolderStep
     * @return eEzsignfolderStep
     */
    public OASFieldEEzsignfolderStep eEzsignfolderStep { get; set; }

    /**
     * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
     * @return dtEzsignfolderClose
     */
    public String dtEzsignfolderClose { get; set; }

    /**
     * Get objAudit
     * @return objAudit
     */
    public OASCommonAudit objAudit { get; set; }

    public static OASEzsignfolderGetObjectV1ResponseMP getExample() {
        OASEzsignfolderGetObjectV1ResponseMP ezsignfolderGetObjectV1ResponseMPayload = new OASEzsignfolderGetObjectV1ResponseMP();
          ezsignfolderGetObjectV1ResponseMPayload.pkiEzsignfolderID = 33;
          ezsignfolderGetObjectV1ResponseMPayload.fkiEzsignfoldertypeID = 5;
          ezsignfolderGetObjectV1ResponseMPayload.sEzsignfoldertypeNameX = 'Default';
          ezsignfolderGetObjectV1ResponseMPayload.fkiBillingentityinternalID = 1;
          ezsignfolderGetObjectV1ResponseMPayload.sBillingentityinternalDescriptionX = 'Default';
          ezsignfolderGetObjectV1ResponseMPayload.fkiEzsigntsarequirementID = 1;
          ezsignfolderGetObjectV1ResponseMPayload.sEzsigntsarequirementDescriptionX = 'Default';
          ezsignfolderGetObjectV1ResponseMPayload.sEzsignfolderDescription = 'Test eZsign Folder';
          ezsignfolderGetObjectV1ResponseMPayload.tEzsignfolderNote = 'This is a note';
          ezsignfolderGetObjectV1ResponseMPayload.bEzsignfolderIsdisposable = false;
          ezsignfolderGetObjectV1ResponseMPayload.eEzsignfolderSendreminderfrequency = OASFieldEEzsignfolderSendreminderfre.getExample();
          ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderDuedate = '2020-12-31 23:59:59';
          ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderSentdate = '2020-12-31T23:59:59.000Z';
          ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderScheduledarchive = '2020-12-31 23:59:59';
          ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderScheduleddispose = '2020-12-31';
          ezsignfolderGetObjectV1ResponseMPayload.eEzsignfolderStep = OASFieldEEzsignfolderStep.getExample();
          ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderClose = '2020-12-31 23:59:59';
          ezsignfolderGetObjectV1ResponseMPayload.objAudit = OASCommonAudit.getExample();
        return ezsignfolderGetObjectV1ResponseMPayload;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignfolderGetObjectV1ResponseMP) {           
            OASEzsignfolderGetObjectV1ResponseMP ezsignfolderGetObjectV1ResponseMPayload = (OASEzsignfolderGetObjectV1ResponseMP) obj;
            return this.pkiEzsignfolderID == ezsignfolderGetObjectV1ResponseMPayload.pkiEzsignfolderID
                && this.fkiEzsignfoldertypeID == ezsignfolderGetObjectV1ResponseMPayload.fkiEzsignfoldertypeID
                && this.sEzsignfoldertypeNameX == ezsignfolderGetObjectV1ResponseMPayload.sEzsignfoldertypeNameX
                && this.fkiBillingentityinternalID == ezsignfolderGetObjectV1ResponseMPayload.fkiBillingentityinternalID
                && this.sBillingentityinternalDescriptionX == ezsignfolderGetObjectV1ResponseMPayload.sBillingentityinternalDescriptionX
                && this.fkiEzsigntsarequirementID == ezsignfolderGetObjectV1ResponseMPayload.fkiEzsigntsarequirementID
                && this.sEzsigntsarequirementDescriptionX == ezsignfolderGetObjectV1ResponseMPayload.sEzsigntsarequirementDescriptionX
                && this.sEzsignfolderDescription == ezsignfolderGetObjectV1ResponseMPayload.sEzsignfolderDescription
                && this.tEzsignfolderNote == ezsignfolderGetObjectV1ResponseMPayload.tEzsignfolderNote
                && this.bEzsignfolderIsdisposable == ezsignfolderGetObjectV1ResponseMPayload.bEzsignfolderIsdisposable
                && this.eEzsignfolderSendreminderfrequency == ezsignfolderGetObjectV1ResponseMPayload.eEzsignfolderSendreminderfrequency
                && this.dtEzsignfolderDuedate == ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderDuedate
                && this.dtEzsignfolderSentdate == ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderSentdate
                && this.dtEzsignfolderScheduledarchive == ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderScheduledarchive
                && this.dtEzsignfolderScheduleddispose == ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderScheduleddispose
                && this.eEzsignfolderStep == ezsignfolderGetObjectV1ResponseMPayload.eEzsignfolderStep
                && this.dtEzsignfolderClose == ezsignfolderGetObjectV1ResponseMPayload.dtEzsignfolderClose
                && this.objAudit == ezsignfolderGetObjectV1ResponseMPayload.objAudit;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignfolderID == null ? 0 : System.hashCode(pkiEzsignfolderID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (sEzsignfoldertypeNameX == null ? 0 : System.hashCode(sEzsignfoldertypeNameX));
        hashCode = (17 * hashCode) + (fkiBillingentityinternalID == null ? 0 : System.hashCode(fkiBillingentityinternalID));
        hashCode = (17 * hashCode) + (sBillingentityinternalDescriptionX == null ? 0 : System.hashCode(sBillingentityinternalDescriptionX));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEzsigntsarequirementDescriptionX == null ? 0 : System.hashCode(sEzsigntsarequirementDescriptionX));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        hashCode = (17 * hashCode) + (bEzsignfolderIsdisposable == null ? 0 : System.hashCode(bEzsignfolderIsdisposable));
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        hashCode = (17 * hashCode) + (dtEzsignfolderDuedate == null ? 0 : System.hashCode(dtEzsignfolderDuedate));
        hashCode = (17 * hashCode) + (dtEzsignfolderSentdate == null ? 0 : System.hashCode(dtEzsignfolderSentdate));
        hashCode = (17 * hashCode) + (dtEzsignfolderScheduledarchive == null ? 0 : System.hashCode(dtEzsignfolderScheduledarchive));
        hashCode = (17 * hashCode) + (dtEzsignfolderScheduleddispose == null ? 0 : System.hashCode(dtEzsignfolderScheduleddispose));
        hashCode = (17 * hashCode) + (eEzsignfolderStep == null ? 0 : System.hashCode(eEzsignfolderStep));
        hashCode = (17 * hashCode) + (dtEzsignfolderClose == null ? 0 : System.hashCode(dtEzsignfolderClose));
        hashCode = (17 * hashCode) + (objAudit == null ? 0 : System.hashCode(objAudit));
        return hashCode;
    }
}

