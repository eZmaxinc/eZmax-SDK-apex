/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignfolder Object and children to create a complete structure
 */
public class OASEzsignfolderResponseCompound implements OASEzsignfolderResponse {
    /**
     * The unique ID of the Ezsignfolder
     * @return pkiEzsignfolderID
     */
    public Integer pkiEzsignfolderID { get; set; }

    /**
     * The unique ID of the Ezsignfoldertype.
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * The name of the Ezsignfoldertype in the language of the requester
     * @return sEzsignfoldertypeNameX
     */
    public String sEzsignfoldertypeNameX { get; set; }

    /**
     * The unique ID of the Billingentityinternal.
     * @return fkiBillingentityinternalID
     */
    public Integer fkiBillingentityinternalID { get; set; }

    /**
     * The description of the Billingentityinternal in the language of the requester
     * @return sBillingentityinternalDescriptionX
     */
    public String sBillingentityinternalDescriptionX { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The description of the Ezsigntsarequirement in the language of the requester
     * @return sEzsigntsarequirementDescriptionX
     */
    public String sEzsigntsarequirementDescriptionX { get; set; }

    /**
     * The description of the Ezsignfolder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * Note about the Ezsignfolder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public OASFieldEEzsignfolderSendreminderfre eEzsignfolderSendreminderfrequency { get; set; }

    /**
     * The maximum date and time at which the Ezsignfolder can be signed.
     * @return dtEzsignfolderDuedate
     */
    public String dtEzsignfolderDuedate { get; set; }

    /**
     * The date and time at which the Ezsign folder was sent the last time.
     * @return dtEzsignfolderSentdate
     */
    public String dtEzsignfolderSentdate { get; set; }

    /**
     * The scheduled date and time at which the Ezsignfolder should be archived.
     * @return dtEzsignfolderScheduledarchive
     */
    public String dtEzsignfolderScheduledarchive { get; set; }

    /**
     * The scheduled date and time at which the Ezsignfolder should be Destroyed.
     * @return dtEzsignfolderScheduleddestruction
     */
    public String dtEzsignfolderScheduleddestruction { get; set; }

    /**
     * Get eEzsignfolderStep
     * @return eEzsignfolderStep
     */
    public OASFieldEEzsignfolderStep eEzsignfolderStep { get; set; }

    /**
     * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
     * @return dtEzsignfolderClose
     */
    public String dtEzsignfolderClose { get; set; }

    /**
     * Get objAudit
     * @return objAudit
     */
    public OASCommonAudit objAudit { get; set; }

    public static OASEzsignfolderResponseCompound getExample() {
        OASEzsignfolderResponseCompound ezsignfolderResponseCompound = new OASEzsignfolderResponseCompound();
          ezsignfolderResponseCompound.pkiEzsignfolderID = 33;
          ezsignfolderResponseCompound.fkiEzsignfoldertypeID = 5;
          ezsignfolderResponseCompound.sEzsignfoldertypeNameX = 'Default';
          ezsignfolderResponseCompound.fkiBillingentityinternalID = 1;
          ezsignfolderResponseCompound.sBillingentityinternalDescriptionX = 'Default';
          ezsignfolderResponseCompound.fkiEzsigntsarequirementID = 92;
          ezsignfolderResponseCompound.sEzsigntsarequirementDescriptionX = 'Default';
          ezsignfolderResponseCompound.sEzsignfolderDescription = 'Test eZsign Folder';
          ezsignfolderResponseCompound.tEzsignfolderNote = 'This is a note';
          ezsignfolderResponseCompound.eEzsignfolderSendreminderfrequency = OASFieldEEzsignfolderSendreminderfre.getExample();
          ezsignfolderResponseCompound.dtEzsignfolderDuedate = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.dtEzsignfolderSentdate = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.dtEzsignfolderScheduledarchive = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.dtEzsignfolderScheduleddestruction = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.eEzsignfolderStep = OASFieldEEzsignfolderStep.getExample();
          ezsignfolderResponseCompound.dtEzsignfolderClose = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.objAudit = OASCommonAudit.getExample();
        return ezsignfolderResponseCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignfolderResponseCompound) {           
            OASEzsignfolderResponseCompound ezsignfolderResponseCompound = (OASEzsignfolderResponseCompound) obj;
            return this.pkiEzsignfolderID == ezsignfolderResponseCompound.pkiEzsignfolderID
                && this.fkiEzsignfoldertypeID == ezsignfolderResponseCompound.fkiEzsignfoldertypeID
                && this.sEzsignfoldertypeNameX == ezsignfolderResponseCompound.sEzsignfoldertypeNameX
                && this.fkiBillingentityinternalID == ezsignfolderResponseCompound.fkiBillingentityinternalID
                && this.sBillingentityinternalDescriptionX == ezsignfolderResponseCompound.sBillingentityinternalDescriptionX
                && this.fkiEzsigntsarequirementID == ezsignfolderResponseCompound.fkiEzsigntsarequirementID
                && this.sEzsigntsarequirementDescriptionX == ezsignfolderResponseCompound.sEzsigntsarequirementDescriptionX
                && this.sEzsignfolderDescription == ezsignfolderResponseCompound.sEzsignfolderDescription
                && this.tEzsignfolderNote == ezsignfolderResponseCompound.tEzsignfolderNote
                && this.eEzsignfolderSendreminderfrequency == ezsignfolderResponseCompound.eEzsignfolderSendreminderfrequency
                && this.dtEzsignfolderDuedate == ezsignfolderResponseCompound.dtEzsignfolderDuedate
                && this.dtEzsignfolderSentdate == ezsignfolderResponseCompound.dtEzsignfolderSentdate
                && this.dtEzsignfolderScheduledarchive == ezsignfolderResponseCompound.dtEzsignfolderScheduledarchive
                && this.dtEzsignfolderScheduleddestruction == ezsignfolderResponseCompound.dtEzsignfolderScheduleddestruction
                && this.eEzsignfolderStep == ezsignfolderResponseCompound.eEzsignfolderStep
                && this.dtEzsignfolderClose == ezsignfolderResponseCompound.dtEzsignfolderClose
                && this.objAudit == ezsignfolderResponseCompound.objAudit;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignfolderID == null ? 0 : System.hashCode(pkiEzsignfolderID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (sEzsignfoldertypeNameX == null ? 0 : System.hashCode(sEzsignfoldertypeNameX));
        hashCode = (17 * hashCode) + (fkiBillingentityinternalID == null ? 0 : System.hashCode(fkiBillingentityinternalID));
        hashCode = (17 * hashCode) + (sBillingentityinternalDescriptionX == null ? 0 : System.hashCode(sBillingentityinternalDescriptionX));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEzsigntsarequirementDescriptionX == null ? 0 : System.hashCode(sEzsigntsarequirementDescriptionX));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        hashCode = (17 * hashCode) + (dtEzsignfolderDuedate == null ? 0 : System.hashCode(dtEzsignfolderDuedate));
        hashCode = (17 * hashCode) + (dtEzsignfolderSentdate == null ? 0 : System.hashCode(dtEzsignfolderSentdate));
        hashCode = (17 * hashCode) + (dtEzsignfolderScheduledarchive == null ? 0 : System.hashCode(dtEzsignfolderScheduledarchive));
        hashCode = (17 * hashCode) + (dtEzsignfolderScheduleddestruction == null ? 0 : System.hashCode(dtEzsignfolderScheduleddestruction));
        hashCode = (17 * hashCode) + (eEzsignfolderStep == null ? 0 : System.hashCode(eEzsignfolderStep));
        hashCode = (17 * hashCode) + (dtEzsignfolderClose == null ? 0 : System.hashCode(dtEzsignfolderClose));
        hashCode = (17 * hashCode) + (objAudit == null ? 0 : System.hashCode(objAudit));
        return hashCode;
    }
}

