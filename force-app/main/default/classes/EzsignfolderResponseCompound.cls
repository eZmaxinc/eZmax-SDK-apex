/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignfolder Object and children to create a complete structure
 */
public class EzsignfolderResponseCompound implements EzsignfolderResponse {
    /**
     * The unique ID of the Ezsignfolder
     * minimum: 0
     * @return pkiEzsignfolderID
     */
    public Integer pkiEzsignfolderID { get; set; }

    /**
     * The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * Get objEzsignfoldertype
     * @return objEzsignfoldertype
     */
    public CustomEzsignfoldertypeResponse objEzsignfoldertype { get; set; }

    /**
     * Get sEzsignfoldertypeNameX
     * @return sEzsignfoldertypeNameX
     */
    public String sEzsignfoldertypeNameX { get; set; }

    /**
     * The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return fkiBillingentityinternalID
     */
    public Integer fkiBillingentityinternalID { get; set; }

    /**
     * The description of the Billingentityinternal in the language of the requester
     * @return sBillingentityinternalDescriptionX
     */
    public String sBillingentityinternalDescriptionX { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The description of the Ezsigntsarequirement in the language of the requester
     * @return sEzsigntsarequirementDescriptionX
     */
    public String sEzsigntsarequirementDescriptionX { get; set; }

    /**
     * The description of the Ezsignfolder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * Note about the Ezsignfolder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    /**
     * If the Ezsigndocument can be disposed
     * @return bEzsignfolderIsdisposable
     */
    public Boolean bEzsignfolderIsdisposable { get; set; }

    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public FieldEEzsignfolderSendreminderfreque eEzsignfolderSendreminderfrequency { get; set; }

    /**
     * The date and time at which the Ezsignfolder will be sent in the future.
     * @return dtEzsignfolderDelayedsenddate
     */
    public String dtEzsignfolderDelayedsenddate { get; set; }

    /**
     * The maximum date and time at which the Ezsignfolder can be signed.
     * @return dtEzsignfolderDuedate
     */
    public String dtEzsignfolderDuedate { get; set; }

    /**
     * The date and time at which the Ezsignfolder was sent the last time.
     * @return dtEzsignfolderSentdate
     */
    public String dtEzsignfolderSentdate { get; set; }

    /**
     * The scheduled date and time at which the Ezsignfolder should be archived.
     * @return dtEzsignfolderScheduledarchive
     */
    public String dtEzsignfolderScheduledarchive { get; set; }

    /**
     * The scheduled date at which the Ezsignfolder should be Disposed.
     * @return dtEzsignfolderScheduleddispose
     */
    public String dtEzsignfolderScheduleddispose { get; set; }

    /**
     * Get eEzsignfolderStep
     * @return eEzsignfolderStep
     */
    public FieldEEzsignfolderStep eEzsignfolderStep { get; set; }

    /**
     * The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
     * @return dtEzsignfolderClose
     */
    public String dtEzsignfolderClose { get; set; }

    /**
     * A custom text message that will be added to the email sent.
     * @return tEzsignfolderMessage
     */
    public String tEzsignfolderMessage { get; set; }

    /**
     * Get objAudit
     * @return objAudit
     */
    public CommonAudit objAudit { get; set; }

    /**
     * This field can be used to store an External ID from the client\'s system.\n\nAnything can be stored in this field, it will never be evaluated by the eZmax system and will be returned\nAS-IS.\n\nTo store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.\n
     * @return sEzsignfolderExternalid
     */
    public String sEzsignfolderExternalid { get; set; }

    public static EzsignfolderResponseCompound getExample() {
        EzsignfolderResponseCompound ezsignfolderResponseCompound = new EzsignfolderResponseCompound();
          ezsignfolderResponseCompound.pkiEzsignfolderID = 33;
          ezsignfolderResponseCompound.fkiEzsignfoldertypeID = 5;
          ezsignfolderResponseCompound.objEzsignfoldertype = CustomEzsignfoldertypeResponse.getExample();
          ezsignfolderResponseCompound.sEzsignfoldertypeNameX = '';
          ezsignfolderResponseCompound.fkiBillingentityinternalID = 1;
          ezsignfolderResponseCompound.sBillingentityinternalDescriptionX = 'Default';
          ezsignfolderResponseCompound.fkiEzsigntsarequirementID = 1;
          ezsignfolderResponseCompound.sEzsigntsarequirementDescriptionX = 'Default';
          ezsignfolderResponseCompound.sEzsignfolderDescription = 'Test eZsign Folder';
          ezsignfolderResponseCompound.tEzsignfolderNote = 'This is a note';
          ezsignfolderResponseCompound.bEzsignfolderIsdisposable = false;
          ezsignfolderResponseCompound.eEzsignfolderSendreminderfrequency = FieldEEzsignfolderSendreminderfreque.getExample();
          ezsignfolderResponseCompound.dtEzsignfolderDelayedsenddate = '2020-12-31T23:59:59.000Z';
          ezsignfolderResponseCompound.dtEzsignfolderDuedate = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.dtEzsignfolderSentdate = '2020-12-31T23:59:59.000Z';
          ezsignfolderResponseCompound.dtEzsignfolderScheduledarchive = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.dtEzsignfolderScheduleddispose = '2020-12-31';
          ezsignfolderResponseCompound.eEzsignfolderStep = FieldEEzsignfolderStep.getExample();
          ezsignfolderResponseCompound.dtEzsignfolderClose = '2020-12-31 23:59:59';
          ezsignfolderResponseCompound.tEzsignfolderMessage = 'Hi everyone,\n\nThis is the document I need you to review.\n\nCould you sign it before Monday please.\n\nBest Regards.\n\nMary';
          ezsignfolderResponseCompound.objAudit = CommonAudit.getExample();
          ezsignfolderResponseCompound.sEzsignfolderExternalid = '{"ID": 1234, "TAGS": ["tag1", "tag2", "tag3"]}';
        return ezsignfolderResponseCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof EzsignfolderResponseCompound) {           
            EzsignfolderResponseCompound ezsignfolderResponseCompound = (EzsignfolderResponseCompound) obj;
            return this.pkiEzsignfolderID == ezsignfolderResponseCompound.pkiEzsignfolderID
                && this.fkiEzsignfoldertypeID == ezsignfolderResponseCompound.fkiEzsignfoldertypeID
                && this.objEzsignfoldertype == ezsignfolderResponseCompound.objEzsignfoldertype
                && this.sEzsignfoldertypeNameX == ezsignfolderResponseCompound.sEzsignfoldertypeNameX
                && this.fkiBillingentityinternalID == ezsignfolderResponseCompound.fkiBillingentityinternalID
                && this.sBillingentityinternalDescriptionX == ezsignfolderResponseCompound.sBillingentityinternalDescriptionX
                && this.fkiEzsigntsarequirementID == ezsignfolderResponseCompound.fkiEzsigntsarequirementID
                && this.sEzsigntsarequirementDescriptionX == ezsignfolderResponseCompound.sEzsigntsarequirementDescriptionX
                && this.sEzsignfolderDescription == ezsignfolderResponseCompound.sEzsignfolderDescription
                && this.tEzsignfolderNote == ezsignfolderResponseCompound.tEzsignfolderNote
                && this.bEzsignfolderIsdisposable == ezsignfolderResponseCompound.bEzsignfolderIsdisposable
                && this.eEzsignfolderSendreminderfrequency == ezsignfolderResponseCompound.eEzsignfolderSendreminderfrequency
                && this.dtEzsignfolderDelayedsenddate == ezsignfolderResponseCompound.dtEzsignfolderDelayedsenddate
                && this.dtEzsignfolderDuedate == ezsignfolderResponseCompound.dtEzsignfolderDuedate
                && this.dtEzsignfolderSentdate == ezsignfolderResponseCompound.dtEzsignfolderSentdate
                && this.dtEzsignfolderScheduledarchive == ezsignfolderResponseCompound.dtEzsignfolderScheduledarchive
                && this.dtEzsignfolderScheduleddispose == ezsignfolderResponseCompound.dtEzsignfolderScheduleddispose
                && this.eEzsignfolderStep == ezsignfolderResponseCompound.eEzsignfolderStep
                && this.dtEzsignfolderClose == ezsignfolderResponseCompound.dtEzsignfolderClose
                && this.tEzsignfolderMessage == ezsignfolderResponseCompound.tEzsignfolderMessage
                && this.objAudit == ezsignfolderResponseCompound.objAudit
                && this.sEzsignfolderExternalid == ezsignfolderResponseCompound.sEzsignfolderExternalid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignfolderID == null ? 0 : System.hashCode(pkiEzsignfolderID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (objEzsignfoldertype == null ? 0 : System.hashCode(objEzsignfoldertype));
        hashCode = (17 * hashCode) + (sEzsignfoldertypeNameX == null ? 0 : System.hashCode(sEzsignfoldertypeNameX));
        hashCode = (17 * hashCode) + (fkiBillingentityinternalID == null ? 0 : System.hashCode(fkiBillingentityinternalID));
        hashCode = (17 * hashCode) + (sBillingentityinternalDescriptionX == null ? 0 : System.hashCode(sBillingentityinternalDescriptionX));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEzsigntsarequirementDescriptionX == null ? 0 : System.hashCode(sEzsigntsarequirementDescriptionX));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        hashCode = (17 * hashCode) + (bEzsignfolderIsdisposable == null ? 0 : System.hashCode(bEzsignfolderIsdisposable));
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        hashCode = (17 * hashCode) + (dtEzsignfolderDelayedsenddate == null ? 0 : System.hashCode(dtEzsignfolderDelayedsenddate));
        hashCode = (17 * hashCode) + (dtEzsignfolderDuedate == null ? 0 : System.hashCode(dtEzsignfolderDuedate));
        hashCode = (17 * hashCode) + (dtEzsignfolderSentdate == null ? 0 : System.hashCode(dtEzsignfolderSentdate));
        hashCode = (17 * hashCode) + (dtEzsignfolderScheduledarchive == null ? 0 : System.hashCode(dtEzsignfolderScheduledarchive));
        hashCode = (17 * hashCode) + (dtEzsignfolderScheduleddispose == null ? 0 : System.hashCode(dtEzsignfolderScheduleddispose));
        hashCode = (17 * hashCode) + (eEzsignfolderStep == null ? 0 : System.hashCode(eEzsignfolderStep));
        hashCode = (17 * hashCode) + (dtEzsignfolderClose == null ? 0 : System.hashCode(dtEzsignfolderClose));
        hashCode = (17 * hashCode) + (tEzsignfolderMessage == null ? 0 : System.hashCode(tEzsignfolderMessage));
        hashCode = (17 * hashCode) + (objAudit == null ? 0 : System.hashCode(objAudit));
        hashCode = (17 * hashCode) + (sEzsignfolderExternalid == null ? 0 : System.hashCode(sEzsignfolderExternalid));
        return hashCode;
    }
}

