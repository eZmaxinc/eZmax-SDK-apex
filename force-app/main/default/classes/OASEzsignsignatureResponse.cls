/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignsignature Object
 */
public class OASEzsignsignatureResponse {
    /**
     * The unique ID of the Ezsignsignature
     * minimum: 0
     * @return pkiEzsignsignatureID
     */
    public Integer pkiEzsignsignatureID { get; set; }

    /**
     * The unique ID of the Ezsigndocument
     * minimum: 0
     * @return fkiEzsigndocumentID
     */
    public Integer fkiEzsigndocumentID { get; set; }

    /**
     * The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return fkiEzsignfoldersignerassociationID
     */
    public Integer fkiEzsignfoldersignerassociationID { get; set; }

    /**
     * The page number in the Ezsigndocument
     * minimum: 1
     * @return iEzsignpagePagenumber
     */
    public Integer iEzsignpagePagenumber { get; set; }

    /**
     * The X coordinate (Horizontal) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use "200" for the X coordinate.
     * minimum: 0
     * @return iEzsignsignatureX
     */
    public Integer iEzsignsignatureX { get; set; }

    /**
     * The Y coordinate (Vertical) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use "300" for the Y coordinate.
     * minimum: 0
     * @return iEzsignsignatureY
     */
    public Integer iEzsignsignatureY { get; set; }

    /**
     * The step when the Ezsignsigner will be invited to sign
     * @return iEzsignsignatureStep
     */
    public Integer iEzsignsignatureStep { get; set; }

    /**
     * Get eEzsignsignatureType
     * @return eEzsignsignatureType
     */
    public OASFieldEEzsignsignatureType eEzsignsignatureType { get; set; }

    /**
     * A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
     * @return tEzsignsignatureTooltip
     */
    public String tEzsignsignatureTooltip { get; set; }

    /**
     * Get eEzsignsignatureTooltipposition
     * @return eEzsignsignatureTooltipposition
     */
    public OASFieldEEzsignsignatureTooltipposit eEzsignsignatureTooltipposition { get; set; }

    /**
     * Get eEzsignsignatureFont
     * @return eEzsignsignatureFont
     */
    public OASFieldEEzsignsignatureFont eEzsignsignatureFont { get; set; }

    /**
     * The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
     * @return iEzsignsignatureValidationstep
     */
    public Integer iEzsignsignatureValidationstep { get; set; }

    /**
     * The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
     * @return sEzsignsignatureAttachmentdescription
     */
    public String sEzsignsignatureAttachmentdescription { get; set; }

    /**
     * Get eEzsignsignatureAttachmentnamesource
     * @return eEzsignsignatureAttachmentnamesource
     */
    public OASFieldEEzsignsignatureAttachmentna eEzsignsignatureAttachmentnamesource { get; set; }

    /**
     * Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments.
     * @return bEzsignsignatureRequired
     */
    public Boolean bEzsignsignatureRequired { get; set; }

    /**
     * The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return fkiEzsignfoldersignerassociationIDValidation
     */
    public Integer fkiEzsignfoldersignerassociationIDValidation { get; set; }

    public static OASEzsignsignatureResponse getExample() {
        OASEzsignsignatureResponse ezsignsignatureResponse = new OASEzsignsignatureResponse();
          ezsignsignatureResponse.pkiEzsignsignatureID = 49;
          ezsignsignatureResponse.fkiEzsigndocumentID = 97;
          ezsignsignatureResponse.fkiEzsignfoldersignerassociationID = 20;
          ezsignsignatureResponse.iEzsignpagePagenumber = 1;
          ezsignsignatureResponse.iEzsignsignatureX = 200;
          ezsignsignatureResponse.iEzsignsignatureY = 300;
          ezsignsignatureResponse.iEzsignsignatureStep = 1;
          ezsignsignatureResponse.eEzsignsignatureType = OASFieldEEzsignsignatureType.getExample();
          ezsignsignatureResponse.tEzsignsignatureTooltip = 'Please sign here if you agree to the terms';
          ezsignsignatureResponse.eEzsignsignatureTooltipposition = OASFieldEEzsignsignatureTooltipposit.getExample();
          ezsignsignatureResponse.eEzsignsignatureFont = OASFieldEEzsignsignatureFont.getExample();
          ezsignsignatureResponse.iEzsignsignatureValidationstep = 1;
          ezsignsignatureResponse.sEzsignsignatureAttachmentdescription = 'Attachment';
          ezsignsignatureResponse.eEzsignsignatureAttachmentnamesource = OASFieldEEzsignsignatureAttachmentna.getExample();
          ezsignsignatureResponse.bEzsignsignatureRequired = true;
          ezsignsignatureResponse.fkiEzsignfoldersignerassociationIDValidation = 20;
        return ezsignsignatureResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignsignatureResponse) {           
            OASEzsignsignatureResponse ezsignsignatureResponse = (OASEzsignsignatureResponse) obj;
            return this.pkiEzsignsignatureID == ezsignsignatureResponse.pkiEzsignsignatureID
                && this.fkiEzsigndocumentID == ezsignsignatureResponse.fkiEzsigndocumentID
                && this.fkiEzsignfoldersignerassociationID == ezsignsignatureResponse.fkiEzsignfoldersignerassociationID
                && this.iEzsignpagePagenumber == ezsignsignatureResponse.iEzsignpagePagenumber
                && this.iEzsignsignatureX == ezsignsignatureResponse.iEzsignsignatureX
                && this.iEzsignsignatureY == ezsignsignatureResponse.iEzsignsignatureY
                && this.iEzsignsignatureStep == ezsignsignatureResponse.iEzsignsignatureStep
                && this.eEzsignsignatureType == ezsignsignatureResponse.eEzsignsignatureType
                && this.tEzsignsignatureTooltip == ezsignsignatureResponse.tEzsignsignatureTooltip
                && this.eEzsignsignatureTooltipposition == ezsignsignatureResponse.eEzsignsignatureTooltipposition
                && this.eEzsignsignatureFont == ezsignsignatureResponse.eEzsignsignatureFont
                && this.iEzsignsignatureValidationstep == ezsignsignatureResponse.iEzsignsignatureValidationstep
                && this.sEzsignsignatureAttachmentdescription == ezsignsignatureResponse.sEzsignsignatureAttachmentdescription
                && this.eEzsignsignatureAttachmentnamesource == ezsignsignatureResponse.eEzsignsignatureAttachmentnamesource
                && this.bEzsignsignatureRequired == ezsignsignatureResponse.bEzsignsignatureRequired
                && this.fkiEzsignfoldersignerassociationIDValidation == ezsignsignatureResponse.fkiEzsignfoldersignerassociationIDValidation;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignsignatureID == null ? 0 : System.hashCode(pkiEzsignsignatureID));
        hashCode = (17 * hashCode) + (fkiEzsigndocumentID == null ? 0 : System.hashCode(fkiEzsigndocumentID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationID == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationID));
        hashCode = (17 * hashCode) + (iEzsignpagePagenumber == null ? 0 : System.hashCode(iEzsignpagePagenumber));
        hashCode = (17 * hashCode) + (iEzsignsignatureX == null ? 0 : System.hashCode(iEzsignsignatureX));
        hashCode = (17 * hashCode) + (iEzsignsignatureY == null ? 0 : System.hashCode(iEzsignsignatureY));
        hashCode = (17 * hashCode) + (iEzsignsignatureStep == null ? 0 : System.hashCode(iEzsignsignatureStep));
        hashCode = (17 * hashCode) + (eEzsignsignatureType == null ? 0 : System.hashCode(eEzsignsignatureType));
        hashCode = (17 * hashCode) + (tEzsignsignatureTooltip == null ? 0 : System.hashCode(tEzsignsignatureTooltip));
        hashCode = (17 * hashCode) + (eEzsignsignatureTooltipposition == null ? 0 : System.hashCode(eEzsignsignatureTooltipposition));
        hashCode = (17 * hashCode) + (eEzsignsignatureFont == null ? 0 : System.hashCode(eEzsignsignatureFont));
        hashCode = (17 * hashCode) + (iEzsignsignatureValidationstep == null ? 0 : System.hashCode(iEzsignsignatureValidationstep));
        hashCode = (17 * hashCode) + (sEzsignsignatureAttachmentdescription == null ? 0 : System.hashCode(sEzsignsignatureAttachmentdescription));
        hashCode = (17 * hashCode) + (eEzsignsignatureAttachmentnamesource == null ? 0 : System.hashCode(eEzsignsignatureAttachmentnamesource));
        hashCode = (17 * hashCode) + (bEzsignsignatureRequired == null ? 0 : System.hashCode(bEzsignsignatureRequired));
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationIDValidation == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationIDValidation));
        return hashCode;
    }
}

