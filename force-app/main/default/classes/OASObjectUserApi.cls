/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASObjectUserApi {
    OASClient client;

    public OASObjectUserApi(OASClient client) {
        this.client = client;
    }

    public OASObjectUserApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a new User
     * The endpoint allows to create one or many elements at once.
     * @param oaSUserCreateObjectV1Request  (required)
     * @return OASUserCreateObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserCreateObjectV1Response userCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSUserCreateObjectV1Request'), 'oaSUserCreateObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserCreateObjectV1Response) client.invoke(
            'POST', '/1/object/user',
            (OASUserCreateObjectV1Request) params.get('oaSUserCreateObjectV1Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASUserCreateObjectV1Response.class
        );
    }
    /**
     * Edit an existing User
     * 
     * @param pkiUserID The unique ID of the User (required)
     * @param oaSUserEditObjectV1Request  (required)
     * @return OASUserEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserEditObjectV1Response userEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        client.assertNotNull(params.get('oaSUserEditObjectV1Request'), 'oaSUserEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserEditObjectV1Response) client.invoke(
            'PUT', '/1/object/user/{pkiUserID}',
            (OASUserEditObjectV1Request) params.get('oaSUserEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASUserEditObjectV1Response.class
        );
    }
    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUserID  (required)
     * @param oaSUserEditPermissionsV1Request  (required)
     * @return OASUserEditPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserEditPermissionsV1Response userEditPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        client.assertNotNull(params.get('oaSUserEditPermissionsV1Request'), 'oaSUserEditPermissionsV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserEditPermissionsV1Response) client.invoke(
            'PUT', '/1/object/user/{pkiUserID}/editPermissions',
            (OASUserEditPermissionsV1Request) params.get('oaSUserEditPermissionsV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASUserEditPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing User\&#39;s Apikeys
     * 
     * @param pkiUserID  (required)
     * @return OASUserGetApikeysV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetApikeysV1Response userGetApikeysV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetApikeysV1Response) client.invoke(
            'GET', '/1/object/user/{pkiUserID}/getApikeys', '',
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetApikeysV1Response.class
        );
    }
    /**
     * Retrieve Users and IDs
     * Get the list of User to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Users to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return OASUserGetAutocompleteV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetAutocompleteV2Response userGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetAutocompleteV2Response) client.invoke(
            'GET', '/2/object/user/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetAutocompleteV2Response.class
        );
    }
    /**
     * Retrieve an existing User\&#39;s Effective Permissions
     * Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
     * @param pkiUserID  (required)
     * @return OASUserGetEffectivePermissionsV1Resp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetEffectivePermissionsV1Resp userGetEffectivePermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetEffectivePermissionsV1Resp) client.invoke(
            'GET', '/1/object/user/{pkiUserID}/getEffectivePermissions', '',
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetEffectivePermissionsV1Resp.class
        );
    }
    /**
     * Retrieve User list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|\n| eUserType | AgentBroker&lt;br&gt;Assistant&lt;br&gt;Employee&lt;br&gt;EzsignUser&lt;br&gt;Normal |\n| eUserOrigin | BuiltIn&lt;br&gt;External |\n| eUserEzsignaccess | No&lt;br&gt;PaidByOffice&lt;br&gt;PerDocument&lt;br&gt;Prepaid |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return OASUserGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetListV1Response userGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetListV1Response) client.invoke(
            'GET', '/1/object/user/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing User
     * 
     * @param pkiUserID The unique ID of the User (required)
     * @return OASUserGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetObjectV2Response userGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetObjectV2Response) client.invoke(
            'GET', '/2/object/user/{pkiUserID}', '',
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetObjectV2Response.class
        );
    }
    /**
     * Retrieve an existing User\&#39;s Permissions
     * 
     * @param pkiUserID  (required)
     * @return OASUserGetPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetPermissionsV1Response userGetPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetPermissionsV1Response) client.invoke(
            'GET', '/1/object/user/{pkiUserID}/getPermissions', '',
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing User\&#39;s Subnets
     * 
     * @param pkiUserID  (required)
     * @return OASUserGetSubnetsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserGetSubnetsV1Response userGetSubnetsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserGetSubnetsV1Response) client.invoke(
            'GET', '/1/object/user/{pkiUserID}/getSubnets', '',
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASUserGetSubnetsV1Response.class
        );
    }
    /**
     * Send password reset
     * Send the password reset email
     * @param pkiUserID  (required)
     * @param body  (required)
     * @return OASUserSendPasswordResetV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUserSendPasswordResetV1Response userSendPasswordResetV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUserID'), 'pkiUserID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUserSendPasswordResetV1Response) client.invoke(
            'POST', '/1/object/user/{pkiUserID}/sendPasswordReset',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiUserID' => (Integer) params.get('pkiUserID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASUserSendPasswordResetV1Response.class
        );
    }
}
