/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.43
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASEzsigndocumentResponseAllOf
 */
public class OASEzsigndocumentResponseAllOf {
    /**
     * The unique ID of the Ezsignfolder
     * @return fkiEzsignfolderID
     */
    public Integer fkiEzsignfolderID { get; set; }

    /**
     * The maximum date and time at which the document can be signed.
     * @return dtEzsigndocumentDuedate
     */
    public String dtEzsigndocumentDuedate { get; set; }

    /**
     * The unique ID of the Language.\n\nValid values:\n\n|Value|Description|\n|-|-|\n|1|French|\n|2|English|
     * minimum: 1
     * maximum: 2
     * @return fkiLanguageID
     */
    public Integer fkiLanguageID { get; set; }

    /**
     * The name of the document that will be presented to Ezsignfoldersignerassociations
     * @return sEzsigndocumentName
     */
    public String sEzsigndocumentName { get; set; }

    /**
     * The unique ID of the Ezsigntemplate
     * @return pkiEzsigndocumentID
     */
    public Integer pkiEzsigndocumentID { get; set; }

    /**
     * Get eEzsigndocumentStep
     * @return eEzsigndocumentStep
     */
    public OASFieldEEzsigndocumentStep eEzsigndocumentStep { get; set; }

    /**
     * The date and time when the Ezsigndocument was first sent.
     * @return dtEzsigndocumentFirstsend
     */
    public String dtEzsigndocumentFirstsend { get; set; }

    /**
     * The date and time when the Ezsigndocument was sent the last time.
     * @return dtEzsigndocumentLastsend
     */
    public String dtEzsigndocumentLastsend { get; set; }

    /**
     * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     * @return iEzsigndocumentOrder
     */
    public Integer iEzsigndocumentOrder { get; set; }

    /**
     * The number of pages in the Ezsigndocument.
     * @return iEzsigndocumentPagetotal
     */
    public Integer iEzsigndocumentPagetotal { get; set; }

    /**
     * The number of signatures that were signed in the document.
     * @return iEzsigndocumentSignaturesigned
     */
    public Integer iEzsigndocumentSignaturesigned { get; set; }

    /**
     * The number of total signatures that were requested in the Ezsigndocument.
     * @return iEzsigndocumentSignaturetotal
     */
    public Integer iEzsigndocumentSignaturetotal { get; set; }

    /**
     * MD5 Hash of the initial PDF Document before signatures were applied to it.
     * @return sEzsigndocumentMD5initial
     */
    public String sEzsigndocumentMD5initial { get; set; }

    /**
     * MD5 Hash of the final PDF Document after all signatures were applied to it.
     * @return sEzsigndocumentMD5signed
     */
    public String sEzsigndocumentMD5signed { get; set; }

    /**
     * Get objAudit
     * @return objAudit
     */
    public OASCommonAudit objAudit { get; set; }

    public static OASEzsigndocumentResponseAllOf getExample() {
        OASEzsigndocumentResponseAllOf ezsigndocumentResponseAllOf = new OASEzsigndocumentResponseAllOf();
          ezsigndocumentResponseAllOf.fkiEzsignfolderID = 33;
          ezsigndocumentResponseAllOf.dtEzsigndocumentDuedate = '2020-12-31 23:59:59';
          ezsigndocumentResponseAllOf.fkiLanguageID = 2;
          ezsigndocumentResponseAllOf.sEzsigndocumentName = 'Contract #123';
          ezsigndocumentResponseAllOf.pkiEzsigndocumentID = 97;
          ezsigndocumentResponseAllOf.eEzsigndocumentStep = OASFieldEEzsigndocumentStep.getExample();
          ezsigndocumentResponseAllOf.dtEzsigndocumentFirstsend = '2020-12-31 23:59:59';
          ezsigndocumentResponseAllOf.dtEzsigndocumentLastsend = '2020-12-31 23:59:59';
          ezsigndocumentResponseAllOf.iEzsigndocumentOrder = 1;
          ezsigndocumentResponseAllOf.iEzsigndocumentPagetotal = 4;
          ezsigndocumentResponseAllOf.iEzsigndocumentSignaturesigned = 3;
          ezsigndocumentResponseAllOf.iEzsigndocumentSignaturetotal = 4;
          ezsigndocumentResponseAllOf.sEzsigndocumentMD5initial = '012345678901234567890123456789AB';
          ezsigndocumentResponseAllOf.sEzsigndocumentMD5signed = '012345678901234567890123456789AB';
          ezsigndocumentResponseAllOf.objAudit = OASCommonAudit.getExample();
        return ezsigndocumentResponseAllOf;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsigndocumentResponseAllOf) {           
            OASEzsigndocumentResponseAllOf ezsigndocumentResponseAllOf = (OASEzsigndocumentResponseAllOf) obj;
            return this.fkiEzsignfolderID == ezsigndocumentResponseAllOf.fkiEzsignfolderID
                && this.dtEzsigndocumentDuedate == ezsigndocumentResponseAllOf.dtEzsigndocumentDuedate
                && this.fkiLanguageID == ezsigndocumentResponseAllOf.fkiLanguageID
                && this.sEzsigndocumentName == ezsigndocumentResponseAllOf.sEzsigndocumentName
                && this.pkiEzsigndocumentID == ezsigndocumentResponseAllOf.pkiEzsigndocumentID
                && this.eEzsigndocumentStep == ezsigndocumentResponseAllOf.eEzsigndocumentStep
                && this.dtEzsigndocumentFirstsend == ezsigndocumentResponseAllOf.dtEzsigndocumentFirstsend
                && this.dtEzsigndocumentLastsend == ezsigndocumentResponseAllOf.dtEzsigndocumentLastsend
                && this.iEzsigndocumentOrder == ezsigndocumentResponseAllOf.iEzsigndocumentOrder
                && this.iEzsigndocumentPagetotal == ezsigndocumentResponseAllOf.iEzsigndocumentPagetotal
                && this.iEzsigndocumentSignaturesigned == ezsigndocumentResponseAllOf.iEzsigndocumentSignaturesigned
                && this.iEzsigndocumentSignaturetotal == ezsigndocumentResponseAllOf.iEzsigndocumentSignaturetotal
                && this.sEzsigndocumentMD5initial == ezsigndocumentResponseAllOf.sEzsigndocumentMD5initial
                && this.sEzsigndocumentMD5signed == ezsigndocumentResponseAllOf.sEzsigndocumentMD5signed
                && this.objAudit == ezsigndocumentResponseAllOf.objAudit;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fkiEzsignfolderID == null ? 0 : System.hashCode(fkiEzsignfolderID));
        hashCode = (17 * hashCode) + (dtEzsigndocumentDuedate == null ? 0 : System.hashCode(dtEzsigndocumentDuedate));
        hashCode = (17 * hashCode) + (fkiLanguageID == null ? 0 : System.hashCode(fkiLanguageID));
        hashCode = (17 * hashCode) + (sEzsigndocumentName == null ? 0 : System.hashCode(sEzsigndocumentName));
        hashCode = (17 * hashCode) + (pkiEzsigndocumentID == null ? 0 : System.hashCode(pkiEzsigndocumentID));
        hashCode = (17 * hashCode) + (eEzsigndocumentStep == null ? 0 : System.hashCode(eEzsigndocumentStep));
        hashCode = (17 * hashCode) + (dtEzsigndocumentFirstsend == null ? 0 : System.hashCode(dtEzsigndocumentFirstsend));
        hashCode = (17 * hashCode) + (dtEzsigndocumentLastsend == null ? 0 : System.hashCode(dtEzsigndocumentLastsend));
        hashCode = (17 * hashCode) + (iEzsigndocumentOrder == null ? 0 : System.hashCode(iEzsigndocumentOrder));
        hashCode = (17 * hashCode) + (iEzsigndocumentPagetotal == null ? 0 : System.hashCode(iEzsigndocumentPagetotal));
        hashCode = (17 * hashCode) + (iEzsigndocumentSignaturesigned == null ? 0 : System.hashCode(iEzsigndocumentSignaturesigned));
        hashCode = (17 * hashCode) + (iEzsigndocumentSignaturetotal == null ? 0 : System.hashCode(iEzsigndocumentSignaturetotal));
        hashCode = (17 * hashCode) + (sEzsigndocumentMD5initial == null ? 0 : System.hashCode(sEzsigndocumentMD5initial));
        hashCode = (17 * hashCode) + (sEzsigndocumentMD5signed == null ? 0 : System.hashCode(sEzsigndocumentMD5signed));
        hashCode = (17 * hashCode) + (objAudit == null ? 0 : System.hashCode(objAudit));
        return hashCode;
    }
}

