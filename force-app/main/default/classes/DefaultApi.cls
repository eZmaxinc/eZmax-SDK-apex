/*
 * eZmax API Definition (PowerAutomate)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class DefaultApi {
    Client client;

    public DefaultApi(Client client) {
        this.client = client;
    }

    public DefaultApi() {
        this.client = new Client();
    }

    public Client getClient() {
        return this.client;
    }

    /**
     * Get Current Activesession
     * Retrieve the details about the current activesession
     * @return ActivesessionGetCurrentV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ActivesessionGetCurrentV1Response activesessionGetCurrentV1() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ActivesessionGetCurrentV1Response) client.invoke(
            'GET', '/1/object/activesession/getCurrent', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            ActivesessionGetCurrentV1Response.class
        );
    }
    /**
     * Apply an Ezsigntemplate to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document.\nThis allows to automatically apply all the form and signature fields on a document in a single step.\n\nThe document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param body  (required)
     * @return EzsigndocumentApplyEzsigntemplateV2R
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentApplyEzsigntemplateV2R ezsigndocumentApplyEzsigntemplateV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentApplyEzsigntemplateV2R) client.invoke(
            'POST', '/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate',
            (EzsigndocumentApplyEzsigntemplateV2R) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'API Key' },
            EzsigndocumentApplyEzsigntemplateV2R.class
        );
    }
    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.
     * @param body  (required)
     * @return EzsigndocumentCreateObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentCreateObjectV2Response ezsigndocumentCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentCreateObjectV2Response) client.invoke(
            'POST', '/2/object/ezsigndocument',
            (EzsigndocumentCreateObjectV2Request) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'API Key' },
            EzsigndocumentCreateObjectV2Response.class
        );
    }
    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.\n\nThese links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param eDocumentType The type of document to retrieve.\n\n1. **Initial** Is the initial document before any signature were applied.\n2. **SignatureReady** Is the version containing the annotations/form to show the signer.\n3. **Signed** Is the final document once all signatures were applied.\n4. **Proofdocument** Is the evidence report.\n5. **Proof** Is the complete evidence archive including all of the above and more.\n (required)
     * @return EzsigndocumentGetDownloadUrlV1Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetDownloadUrlV1Respon ezsigndocumentGetDownloadUrlV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('eDocumentType'), 'eDocumentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetDownloadUrlV1Respon) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID'),
                'eDocumentType' => (String) params.get('eDocumentType')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            EzsigndocumentGetDownloadUrlV1Respon.class
        );
    }
    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.
     * @param body  (required)
     * @return EzsignfolderCreateObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderCreateObjectV2Response ezsignfolderCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderCreateObjectV2Response) client.invoke(
            'POST', '/2/object/ezsignfolder',
            (EzsignfolderCreateObjectV2Request) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'API Key' },
            EzsignfolderCreateObjectV2Response.class
        );
    }
    /**
     * Dispose the Ezsignfolder
     * 
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (required)
     * @param body  (required)
     * @return EzsignfolderDisposeV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderDisposeV1Response ezsignfolderDisposeV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderDisposeV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'API Key' },
            EzsignfolderDisposeV1Response.class
        );
    }
    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (required)
     * @param body  (required)
     * @return EzsignfolderSendV3Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfolderSendV3Response ezsignfolderSendV3(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfolderSendV3Response) client.invoke(
            'POST', '/3/object/ezsignfolder/{pkiEzsignfolderID}/send',
            (EzsignfolderSendV3Request) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'API Key' },
            EzsignfolderSendV3Response.class
        );
    }
    /**
     * Create a new Ezsignfoldersignerassociation
     * The endpoint allows to create one or many elements at once.
     * @param body  (required)
     * @return EzsignfoldersignerassociationCreateO
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfoldersignerassociationCreateO ezsignfoldersignerassociationCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfoldersignerassociationCreateO) client.invoke(
            'POST', '/2/object/ezsignfoldersignerassociation',
            (EzsignfoldersignerassociationCreateO) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'API Key' },
            EzsignfoldersignerassociationCreateO.class
        );
    }
    /**
     * Retrieve Ezsignfoldertypes and IDs
     * Get the list of Ezsignfoldertype to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsignfoldertypes to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return EzsignfoldertypeGetAutocompleteV2Res
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsignfoldertypeGetAutocompleteV2Res ezsignfoldertypeGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsignfoldertypeGetAutocompleteV2Res) client.invoke(
            'GET', '/2/object/ezsignfoldertype/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            EzsignfoldertypeGetAutocompleteV2Res.class
        );
    }
    /**
     * Retrieve Ezsigntemplates and IDs
     * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsigntemplates to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return EzsigntemplateGetAutocompleteV2Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigntemplateGetAutocompleteV2Respo ezsigntemplateGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigntemplateGetAutocompleteV2Respo) client.invoke(
            'GET', '/2/object/ezsigntemplate/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            EzsigntemplateGetAutocompleteV2Respo.class
        );
    }
    /**
     * Retrieve Ezsigntemplatepackages and IDs
     * Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsigntemplatepackages to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return EzsigntemplatepackageGetAutocomplete
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigntemplatepackageGetAutocomplete ezsigntemplatepackageGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigntemplatepackageGetAutocomplete) client.invoke(
            'GET', '/2/object/ezsigntemplatepackage/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            EzsigntemplatepackageGetAutocomplete.class
        );
    }
    /**
     * Retrieve Ezsigntsarequirements and IDs
     * Get the list of Ezsigntsarequirement to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsigntsarequirements to return (required)
     * @param fkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype. (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return EzsigntsarequirementGetAutocompleteV
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigntsarequirementGetAutocompleteV ezsigntsarequirementGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('fkiEzsignfoldertypeID', (Integer) params.get('fkiEzsignfoldertypeID')));
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigntsarequirementGetAutocompleteV) client.invoke(
            'GET', '/2/object/ezsigntsarequirement/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            EzsigntsarequirementGetAutocompleteV.class
        );
    }
    /**
     * Retrieve Languages and IDs
     * Get the list of Language to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Languages to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return LanguageGetAutocompleteV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public LanguageGetAutocompleteV2Response languageGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (LanguageGetAutocompleteV2Response) client.invoke(
            'GET', '/2/object/language/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            LanguageGetAutocompleteV2Response.class
        );
    }
    /**
     * Retrieve Secretquestions and IDs
     * Get the list of Secretquestion to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Secretquestions to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return SecretquestionGetAutocompleteV2Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public SecretquestionGetAutocompleteV2Respo secretquestionGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (SecretquestionGetAutocompleteV2Respo) client.invoke(
            'GET', '/2/object/secretquestion/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            SecretquestionGetAutocompleteV2Respo.class
        );
    }
    /**
     * Retrieve Taxassignments and IDs
     * Get the list of Taxassignment to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Taxassignments to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return TaxassignmentGetAutocompleteV2Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public TaxassignmentGetAutocompleteV2Respon taxassignmentGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (TaxassignmentGetAutocompleteV2Respon) client.invoke(
            'GET', '/2/object/taxassignment/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            TaxassignmentGetAutocompleteV2Respon.class
        );
    }
    /**
     * Retrieve Users and IDs
     * Get the list of User to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Users to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return UserGetAutocompleteV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UserGetAutocompleteV2Response userGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (UserGetAutocompleteV2Response) client.invoke(
            'GET', '/2/object/user/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            UserGetAutocompleteV2Response.class
        );
    }
    /**
     * Retrieve Userlogintypes and IDs
     * Get the list of Userlogintype to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Userlogintypes to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage The language of the returned content.\n\n1. **\*** (or header not defined) Default language\n2. **en** English\n2. **fr** French\n\n (optional)
     * @return UserlogintypeGetAutocompleteV2Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public UserlogintypeGetAutocompleteV2Respon userlogintypeGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (UserlogintypeGetAutocompleteV2Respon) client.invoke(
            'GET', '/2/object/userlogintype/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (String) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'API Key' },
            UserlogintypeGetAutocompleteV2Respon.class
        );
    }
}
