/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.\n\nWe provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.\n\nYou can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.\n\nIf you need helping understanding how to use this API, don\'t waste too much time looking for it. Contact support-api@ezmax.ca, we\'re here to help. We are developpers so we know programmers don\'t like bad documentation. If you don\'t find what you need in the documentation, let us know, we\'ll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsigndocument Object and children to create a complete structure
 */
public class OASEzsigndocumentRequestCompound implements OASEzsigndocumentRequest {
    /**
     * Indicates where to look for the document binary content.
     */
    public enum EEzsigndocumentSourceEnum {
        BASE64
    }

    /**
     * Indicates where to look for the document binary content.
     * @return eEzsigndocumentSource
     */
    public EEzsigndocumentSourceEnum eEzsigndocumentSource { get; set; }

    /**
     * Indicates the format of the document.
     */
    public enum EEzsigndocumentFormatEnum {
        PDF
    }

    /**
     * Indicates the format of the document.
     * @return eEzsigndocumentFormat
     */
    public EEzsigndocumentFormatEnum eEzsigndocumentFormat { get; set; }

    /**
     * The Base64 encoded binary content of the document.\n\nThis field is Required when eEzsigndocumentSource = Base64.
     * @return sEzsigndocumentBase64
     */
    public Blob sEzsigndocumentBase64 { get; set; }

    /**
     * A reference to a valid Ezsignfolder.\n\nThat value is returned after a successful Ezsignfolder Creation.
     * minimum: 1
     * @return fkiEzsignfolderID
     */
    public Integer fkiEzsignfolderID { get; set; }

    /**
     * Represent a Date Time.\nThe timezone is the one configured in the User\'s profile.
     * @return dtEzsigndocumentDuedate
     */
    public String dtEzsigndocumentDuedate { get; set; }

    /**
     * The unique ID of the Language.\n\nValid values:\n\n|Value|Description|\n|-|-|\n|1|French|\n|2|English|
     * minimum: 1
     * maximum: 2
     * @return fkiLanguageID
     */
    public Integer fkiLanguageID { get; set; }

    /**
     * The actual file name that will be used when downloading or attaching to an email.
     * @return sEzsigndocumentFilename
     */
    public String sEzsigndocumentFilename { get; set; }

    /**
     * The name of the document that will be presented to Ezsignfoldersignerassociations
     * @return sEzsigndocumentName
     */
    public String sEzsigndocumentName { get; set; }

    public static OASEzsigndocumentRequestCompound getExample() {
        OASEzsigndocumentRequestCompound ezsigndocumentRequestCompound = new OASEzsigndocumentRequestCompound();
          ezsigndocumentRequestCompound.eEzsigndocumentSource = EEzsigndocumentSourceEnum.BASE64;
          ezsigndocumentRequestCompound.eEzsigndocumentFormat = EEzsigndocumentFormatEnum.PDF;
          ezsigndocumentRequestCompound.sEzsigndocumentBase64 = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
          ezsigndocumentRequestCompound.fkiEzsignfolderID = 0;
          ezsigndocumentRequestCompound.dtEzsigndocumentDuedate = '2020-12-31 23:59:59';
          ezsigndocumentRequestCompound.fkiLanguageID = 2;
          ezsigndocumentRequestCompound.sEzsigndocumentFilename = '';
          ezsigndocumentRequestCompound.sEzsigndocumentName = '';
        return ezsigndocumentRequestCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsigndocumentRequestCompound) {           
            OASEzsigndocumentRequestCompound ezsigndocumentRequestCompound = (OASEzsigndocumentRequestCompound) obj;
            return this.eEzsigndocumentSource == ezsigndocumentRequestCompound.eEzsigndocumentSource
                && this.eEzsigndocumentFormat == ezsigndocumentRequestCompound.eEzsigndocumentFormat
                && this.sEzsigndocumentBase64 == ezsigndocumentRequestCompound.sEzsigndocumentBase64
                && this.fkiEzsignfolderID == ezsigndocumentRequestCompound.fkiEzsignfolderID
                && this.dtEzsigndocumentDuedate == ezsigndocumentRequestCompound.dtEzsigndocumentDuedate
                && this.fkiLanguageID == ezsigndocumentRequestCompound.fkiLanguageID
                && this.sEzsigndocumentFilename == ezsigndocumentRequestCompound.sEzsigndocumentFilename
                && this.sEzsigndocumentName == ezsigndocumentRequestCompound.sEzsigndocumentName;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (eEzsigndocumentSource == null ? 0 : System.hashCode(eEzsigndocumentSource));
        hashCode = (17 * hashCode) + (eEzsigndocumentFormat == null ? 0 : System.hashCode(eEzsigndocumentFormat));
        hashCode = (17 * hashCode) + (sEzsigndocumentBase64 == null ? 0 : System.hashCode(sEzsigndocumentBase64));
        hashCode = (17 * hashCode) + (fkiEzsignfolderID == null ? 0 : System.hashCode(fkiEzsignfolderID));
        hashCode = (17 * hashCode) + (dtEzsigndocumentDuedate == null ? 0 : System.hashCode(dtEzsigndocumentDuedate));
        hashCode = (17 * hashCode) + (fkiLanguageID == null ? 0 : System.hashCode(fkiLanguageID));
        hashCode = (17 * hashCode) + (sEzsigndocumentFilename == null ? 0 : System.hashCode(sEzsigndocumentFilename));
        hashCode = (17 * hashCode) + (sEzsigndocumentName == null ? 0 : System.hashCode(sEzsigndocumentName));
        return hashCode;
    }
}

