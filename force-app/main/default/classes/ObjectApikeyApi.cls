/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class ObjectApikeyApi {
    Client client;

    public ObjectApikeyApi(Client client) {
        this.client = client;
    }

    public ObjectApikeyApi() {
        this.client = new Client();
    }

    public Client getClient() {
        return this.client;
    }

    /**
     * Create a new Apikey
     * The endpoint allows to create one or many elements at once.
     * @param apikeyCreateObjectV2Request  (required)
     * @return ApikeyCreateObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyCreateObjectV2Response apikeyCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('apikeyCreateObjectV2Request'), 'apikeyCreateObjectV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyCreateObjectV2Response) client.invoke(
            'POST', '/2/object/apikey',
            (ApikeyCreateObjectV2Request) params.get('apikeyCreateObjectV2Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            ApikeyCreateObjectV2Response.class
        );
    }
    /**
     * Edit an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param apikeyEditObjectV1Request  (required)
     * @return ApikeyEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyEditObjectV1Response apikeyEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        client.assertNotNull(params.get('apikeyEditObjectV1Request'), 'apikeyEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyEditObjectV1Response) client.invoke(
            'PUT', '/1/object/apikey/{pkiApikeyID}',
            (ApikeyEditObjectV1Request) params.get('apikeyEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            ApikeyEditObjectV1Response.class
        );
    }
    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID  (required)
     * @param apikeyEditPermissionsV1Request  (required)
     * @return ApikeyEditPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyEditPermissionsV1Response apikeyEditPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        client.assertNotNull(params.get('apikeyEditPermissionsV1Request'), 'apikeyEditPermissionsV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyEditPermissionsV1Response) client.invoke(
            'PUT', '/1/object/apikey/{pkiApikeyID}/editPermissions',
            (ApikeyEditPermissionsV1Request) params.get('apikeyEditPermissionsV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            ApikeyEditPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing Apikey\&#39;s cors
     * 
     * @param pkiApikeyID  (required)
     * @return ApikeyGetCorsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyGetCorsV1Response apikeyGetCorsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyGetCorsV1Response) client.invoke(
            'GET', '/1/object/apikey/{pkiApikeyID}/getCors', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            ApikeyGetCorsV1Response.class
        );
    }
    /**
     * Retrieve Apikey list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApikeyGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyGetListV1Response apikeyGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyGetListV1Response) client.invoke(
            'GET', '/1/object/apikey/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (HeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            ApikeyGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @return ApikeyGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyGetObjectV2Response apikeyGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyGetObjectV2Response) client.invoke(
            'GET', '/2/object/apikey/{pkiApikeyID}', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            ApikeyGetObjectV2Response.class
        );
    }
    /**
     * Retrieve an existing Apikey\&#39;s Permissions
     * 
     * @param pkiApikeyID  (required)
     * @return ApikeyGetPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyGetPermissionsV1Response apikeyGetPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyGetPermissionsV1Response) client.invoke(
            'GET', '/1/object/apikey/{pkiApikeyID}/getPermissions', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            ApikeyGetPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing Apikey\&#39;s subnets
     * 
     * @param pkiApikeyID  (required)
     * @return ApikeyGetSubnetsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyGetSubnetsV1Response apikeyGetSubnetsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyGetSubnetsV1Response) client.invoke(
            'GET', '/1/object/apikey/{pkiApikeyID}/getSubnets', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            ApikeyGetSubnetsV1Response.class
        );
    }
    /**
     * Regenerate the Apikey
     * 
     * @param pkiApikeyID  (required)
     * @param apikeyRegenerateV1Request  (required)
     * @return ApikeyRegenerateV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public ApikeyRegenerateV1Response apikeyRegenerateV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        client.assertNotNull(params.get('apikeyRegenerateV1Request'), 'apikeyRegenerateV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (ApikeyRegenerateV1Response) client.invoke(
            'POST', '/1/object/apikey/{pkiApikeyID}/regenerate',
            (ApikeyRegenerateV1Request) params.get('apikeyRegenerateV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            ApikeyRegenerateV1Response.class
        );
    }
}
