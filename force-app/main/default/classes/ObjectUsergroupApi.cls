/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class ObjectUsergroupApi {
    Client client;

    public ObjectUsergroupApi(Client client) {
        this.client = client;
    }

    public ObjectUsergroupApi() {
        this.client = new Client();
    }

    public Client getClient() {
        return this.client;
    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupCreateObjectV1Request  (required)
     * @return UsergroupCreateObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupCreateObjectV1Response usergroupCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('usergroupCreateObjectV1Request'), 'usergroupCreateObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupCreateObjectV1Response) client.invoke(
            'POST', '/1/object/usergroup',
            (UsergroupCreateObjectV1Request) params.get('usergroupCreateObjectV1Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            UsergroupCreateObjectV1Response.class
        );
    }
    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID  (required)
     * @param usergroupEditObjectV1Request  (required)
     * @return UsergroupEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupEditObjectV1Response usergroupEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        client.assertNotNull(params.get('usergroupEditObjectV1Request'), 'usergroupEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupEditObjectV1Response) client.invoke(
            'PUT', '/1/object/usergroup/{pkiUsergroupID}',
            (UsergroupEditObjectV1Request) params.get('usergroupEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            UsergroupEditObjectV1Response.class
        );
    }
    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditPermissionsV1Request  (required)
     * @return UsergroupEditPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupEditPermissionsV1Response usergroupEditPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        client.assertNotNull(params.get('usergroupEditPermissionsV1Request'), 'usergroupEditPermissionsV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupEditPermissionsV1Response) client.invoke(
            'PUT', '/1/object/usergroup/{pkiUsergroupID}/editPermissions',
            (UsergroupEditPermissionsV1Request) params.get('usergroupEditPermissionsV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            UsergroupEditPermissionsV1Response.class
        );
    }
    /**
     * Edit multiple Usergroupdelegations
     * Edit multiple Usergroupdelegations
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupdelegationsV1R  (required)
     * @return UsergroupEditUsergroupdelegationsV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupEditUsergroupdelegationsV1R usergroupEditUsergroupdelegationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        client.assertNotNull(params.get('usergroupEditUsergroupdelegationsV1R'), 'usergroupEditUsergroupdelegationsV1R');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupEditUsergroupdelegationsV1R) client.invoke(
            'PUT', '/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations',
            (UsergroupEditUsergroupdelegationsV1R) params.get('usergroupEditUsergroupdelegationsV1R'),
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            UsergroupEditUsergroupdelegationsV1R.class
        );
    }
    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupmembershipsV1R  (required)
     * @return UsergroupEditUsergroupmembershipsV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupEditUsergroupmembershipsV1R usergroupEditUsergroupmembershipsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        client.assertNotNull(params.get('usergroupEditUsergroupmembershipsV1R'), 'usergroupEditUsergroupmembershipsV1R');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupEditUsergroupmembershipsV1R) client.invoke(
            'PUT', '/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships',
            (UsergroupEditUsergroupmembershipsV1R) params.get('usergroupEditUsergroupmembershipsV1R'),
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            UsergroupEditUsergroupmembershipsV1R.class
        );
    }
    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return UsergroupGetAutocompleteV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupGetAutocompleteV2Response usergroupGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupGetAutocompleteV2Response) client.invoke(
            'GET', '/2/object/usergroup/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (HeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            UsergroupGetAutocompleteV2Response.class
        );
    }
    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return UsergroupGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupGetListV1Response usergroupGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupGetListV1Response) client.invoke(
            'GET', '/1/object/usergroup/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (HeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            UsergroupGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupGetObjectV2Response usergroupGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupGetObjectV2Response) client.invoke(
            'GET', '/2/object/usergroup/{pkiUsergroupID}', '',
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            UsergroupGetObjectV2Response.class
        );
    }
    /**
     * Retrieve an existing Usergroup\&#39;s Permissions
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupGetPermissionsV1Response usergroupGetPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupGetPermissionsV1Response) client.invoke(
            'GET', '/1/object/usergroup/{pkiUsergroupID}/getPermissions', '',
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            UsergroupGetPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing Usergroup\&#39;s Usergroupdelegations
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetUsergroupdelegationsV1Re
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupGetUsergroupdelegationsV1Re usergroupGetUsergroupdelegationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupGetUsergroupdelegationsV1Re) client.invoke(
            'GET', '/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations', '',
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            UsergroupGetUsergroupdelegationsV1Re.class
        );
    }
    /**
     * Retrieve an existing Usergroup\&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetUsergroupmembershipsV1Re
     * @throws OAS.ApiException if fails to make API call
     */
    public UsergroupGetUsergroupmembershipsV1Re usergroupGetUsergroupmembershipsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiUsergroupID'), 'pkiUsergroupID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (UsergroupGetUsergroupmembershipsV1Re) client.invoke(
            'GET', '/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships', '',
            query, form,
            new Map<String, Object>{
                'pkiUsergroupID' => (Integer) params.get('pkiUsergroupID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            UsergroupGetUsergroupmembershipsV1Re.class
        );
    }
}
