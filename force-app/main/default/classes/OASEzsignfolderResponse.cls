/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.\n\nWe provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.\n\nYou can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.\n\nIf you need helping understanding how to use this API, don\'t waste too much time looking for it. Contact support-api@ezmax.ca, we\'re here to help. We are developpers so we know programmers don\'t like bad documentation. If you don\'t find what you need in the documentation, let us know, we\'ll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.29
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignfolder Object
 */
public class OASEzsignfolderResponse implements OASEzsignfolderResponseAllOf {
    /**
     * The unique ID of the Ezsignfoldertype.\r\n\r\nThis value can be queried by the API and is also visible in the admin interface.\r\n\r\nThere are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The description of the Ezsign Folder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * Somes extra notes about the eZsign Folder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public OASFieldEEzsignfolderSendreminderfre eEzsignfolderSendreminderfrequency { get; set; }

    /**
     * The unique ID of the Ezsignfolder
     * @return pkiEzsignfolderID
     */
    public Integer pkiEzsignfolderID { get; set; }

    /**
     * The date and time at which the Ezsign folder was sent the last time.
     * @return dtEzsignfolderSentdate
     */
    public String dtEzsignfolderSentdate { get; set; }

    /**
     * Get eEzsignfolderStep
     * @return eEzsignfolderStep
     */
    public OASFieldEEzsignfolderStep eEzsignfolderStep { get; set; }

    /**
     * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
     * @return dtEzsignfolderClose
     */
    public String dtEzsignfolderClose { get; set; }

    /**
     * Get objAudit
     * @return objAudit
     */
    public OASCommonAudit objAudit { get; set; }

    public static OASEzsignfolderResponse getExample() {
        OASEzsignfolderResponse ezsignfolderResponse = new OASEzsignfolderResponse();
          ezsignfolderResponse.fkiEzsignfoldertypeID = 5;
          ezsignfolderResponse.fkiEzsigntsarequirementID = 92;
          ezsignfolderResponse.sEzsignfolderDescription = 'Test eZsign Folder';
          ezsignfolderResponse.tEzsignfolderNote = 'An extra notes we can add to the ezsign folder';
          ezsignfolderResponse.eEzsignfolderSendreminderfrequency = OASFieldEEzsignfolderSendreminderfre.getExample();
          ezsignfolderResponse.pkiEzsignfolderID = 33;
          ezsignfolderResponse.dtEzsignfolderSentdate = '2020-12-31 23:59:59';
          ezsignfolderResponse.eEzsignfolderStep = OASFieldEEzsignfolderStep.getExample();
          ezsignfolderResponse.dtEzsignfolderClose = '2020-12-31 23:59:59';
          ezsignfolderResponse.objAudit = OASCommonAudit.getExample();
        return ezsignfolderResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignfolderResponse) {           
            OASEzsignfolderResponse ezsignfolderResponse = (OASEzsignfolderResponse) obj;
            return this.fkiEzsignfoldertypeID == ezsignfolderResponse.fkiEzsignfoldertypeID
                && this.fkiEzsigntsarequirementID == ezsignfolderResponse.fkiEzsigntsarequirementID
                && this.sEzsignfolderDescription == ezsignfolderResponse.sEzsignfolderDescription
                && this.tEzsignfolderNote == ezsignfolderResponse.tEzsignfolderNote
                && this.eEzsignfolderSendreminderfrequency == ezsignfolderResponse.eEzsignfolderSendreminderfrequency
                && this.pkiEzsignfolderID == ezsignfolderResponse.pkiEzsignfolderID
                && this.dtEzsignfolderSentdate == ezsignfolderResponse.dtEzsignfolderSentdate
                && this.eEzsignfolderStep == ezsignfolderResponse.eEzsignfolderStep
                && this.dtEzsignfolderClose == ezsignfolderResponse.dtEzsignfolderClose
                && this.objAudit == ezsignfolderResponse.objAudit;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        hashCode = (17 * hashCode) + (pkiEzsignfolderID == null ? 0 : System.hashCode(pkiEzsignfolderID));
        hashCode = (17 * hashCode) + (dtEzsignfolderSentdate == null ? 0 : System.hashCode(dtEzsignfolderSentdate));
        hashCode = (17 * hashCode) + (eEzsignfolderStep == null ? 0 : System.hashCode(eEzsignfolderStep));
        hashCode = (17 * hashCode) + (dtEzsignfolderClose == null ? 0 : System.hashCode(dtEzsignfolderClose));
        hashCode = (17 * hashCode) + (objAudit == null ? 0 : System.hashCode(objAudit));
        return hashCode;
    }
}

