/*
 * eZmax API Definition (PowerAutomate)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignfolder Object and children to create a complete structure
 */
public class EzsignfolderRequestCompound {
    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public FieldEEzsignfolderSendreminderfreque eEzsignfolderSendreminderfrequency { get; set; }

    /**
     * The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * maximum: 65535
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The unique ID of the Ezsignfolder
     * minimum: 0
     * @return pkiEzsignfolderID
     */
    public Integer pkiEzsignfolderID { get; set; }

    /**
     * The description of the Ezsignfolder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * This field can be used to store an External ID from the client\'s system.\n\nAnything can be stored in this field, it will never be evaluated by the eZmax system and will be returned\nAS-IS.\n\nTo store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.\n
     * @return sEzsignfolderExternalid
     */
    public String sEzsignfolderExternalid { get; set; }

    /**
     * Note about the Ezsignfolder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    public static EzsignfolderRequestCompound getExample() {
        EzsignfolderRequestCompound ezsignfolderRequestCompound = new EzsignfolderRequestCompound();
          ezsignfolderRequestCompound.eEzsignfolderSendreminderfrequency = FieldEEzsignfolderSendreminderfreque.getExample();
          ezsignfolderRequestCompound.fkiEzsignfoldertypeID = 5;
          ezsignfolderRequestCompound.fkiEzsigntsarequirementID = 1;
          ezsignfolderRequestCompound.pkiEzsignfolderID = 33;
          ezsignfolderRequestCompound.sEzsignfolderDescription = 'Test eZsign Folder';
          ezsignfolderRequestCompound.sEzsignfolderExternalid = '{"ID": 1234, "TAGS": ["tag1", "tag2", "tag3"]}';
          ezsignfolderRequestCompound.tEzsignfolderNote = 'This is a note';
        return ezsignfolderRequestCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof EzsignfolderRequestCompound) {           
            EzsignfolderRequestCompound ezsignfolderRequestCompound = (EzsignfolderRequestCompound) obj;
            return this.eEzsignfolderSendreminderfrequency == ezsignfolderRequestCompound.eEzsignfolderSendreminderfrequency
                && this.fkiEzsignfoldertypeID == ezsignfolderRequestCompound.fkiEzsignfoldertypeID
                && this.fkiEzsigntsarequirementID == ezsignfolderRequestCompound.fkiEzsigntsarequirementID
                && this.pkiEzsignfolderID == ezsignfolderRequestCompound.pkiEzsignfolderID
                && this.sEzsignfolderDescription == ezsignfolderRequestCompound.sEzsignfolderDescription
                && this.sEzsignfolderExternalid == ezsignfolderRequestCompound.sEzsignfolderExternalid
                && this.tEzsignfolderNote == ezsignfolderRequestCompound.tEzsignfolderNote;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (pkiEzsignfolderID == null ? 0 : System.hashCode(pkiEzsignfolderID));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (sEzsignfolderExternalid == null ? 0 : System.hashCode(sEzsignfolderExternalid));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        return hashCode;
    }
}

