/*
 * eZmax API Definition (PowerAutomate)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsigndocument Object and children to create a complete structure
 */
public class EzsigndocumentRequestCompound {
    /**
     * Try to repair the document or flatten it if it cannot be used for electronic signature. 
     * @return bEzsigndocumentForcerepair
     */
    public Boolean bEzsigndocumentForcerepair { get; set; }

    /**
     * The maximum date and time at which the Ezsigndocument can be signed.
     * @return dtEzsigndocumentDuedate
     */
    public String dtEzsigndocumentDuedate { get; set; }

    /**
     * If the document contains an existing PDF form this property must be set.\r\n**Keep** leaves the form as-is in the document.\r\n**Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**
     */
    public enum EEzsigndocumentFormEnum {
        KEEP,
        CONVERT
    }

    /**
     * If the document contains an existing PDF form this property must be set.\r\n**Keep** leaves the form as-is in the document.\r\n**Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**
     * @return eEzsigndocumentForm
     */
    public EEzsigndocumentFormEnum eEzsigndocumentForm { get; set; }

    /**
     * Indicates the format of the document.
     */
    public enum EEzsigndocumentFormatEnum {
        PDF,
        DOC,
        DOCX,
        XLS,
        XLSX,
        PPT,
        PPTX
    }

    /**
     * Indicates the format of the document.
     * @return eEzsigndocumentFormat
     */
    public EEzsigndocumentFormatEnum eEzsigndocumentFormat { get; set; }

    /**
     * Indicates where to look for the document binary content.
     */
    public enum EEzsigndocumentSourceEnum {
        BASE64,
        EZSIGNTEMPLATE,
        URL
    }

    /**
     * Indicates where to look for the document binary content.
     * @return eEzsigndocumentSource
     */
    public EEzsigndocumentSourceEnum eEzsigndocumentSource { get; set; }

    /**
     * The unique ID of the Ezsignfolder
     * minimum: 0
     * @return fkiEzsignfolderID
     */
    public Integer fkiEzsignfolderID { get; set; }

    /**
     * The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return fkiEzsignfoldersignerassociationID
     */
    public Integer fkiEzsignfoldersignerassociationID { get; set; }

    /**
     * The unique ID of the Ezsigntemplate
     * minimum: 0
     * @return fkiEzsigntemplateID
     */
    public Integer fkiEzsigntemplateID { get; set; }

    /**
     * The unique ID of the Language.\n\nValid values:\n\n|Value|Description|\n|-|-|\n|1|French|\n|2|English|
     * minimum: 1
     * maximum: 2
     * @return fkiLanguageID
     */
    public Integer fkiLanguageID { get; set; }

    /**
     * The unique ID of the Ezsigndocument
     * minimum: 0
     * @return pkiEzsigndocumentID
     */
    public Integer pkiEzsigndocumentID { get; set; }

    /**
     * The Base64 encoded binary content of the document.\n\nThis field is Required when eEzsigndocumentSource = Base64.
     * @return sEzsigndocumentBase64
     */
    public Blob sEzsigndocumentBase64 { get; set; }

    /**
     * This field can be used to store an External ID from the client\'s system.\n\nAnything can be stored in this field, it will never be evaluated by the eZmax system and will be returned\nAS-IS.\n\nTo store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.\n
     * @return sEzsigndocumentExternalid
     */
    public String sEzsigndocumentExternalid { get; set; }

    /**
     * The name of the document that will be presented to Ezsignfoldersignerassociations
     * @return sEzsigndocumentName
     */
    public String sEzsigndocumentName { get; set; }

    /**
     * If the source document is password protected, the password to open/modify it.
     * @return sEzsigndocumentPassword
     */
    public String sEzsigndocumentPassword { get; set; }

    /**
     * The url where the document content resides.\n\nThis field is Required when eEzsigndocumentSource = Url.
     * @return sEzsigndocumentUrl
     */
    public String sEzsigndocumentUrl { get; set; }

    public EzsigndocumentRequestCompound() {
        bEzsigndocumentForcerepair = true;
    }

    public static EzsigndocumentRequestCompound getExample() {
        EzsigndocumentRequestCompound ezsigndocumentRequestCompound = new EzsigndocumentRequestCompound();
          ezsigndocumentRequestCompound.bEzsigndocumentForcerepair = true;
          ezsigndocumentRequestCompound.dtEzsigndocumentDuedate = '2020-12-31 23:59:59';
          ezsigndocumentRequestCompound.eEzsigndocumentForm = EEzsigndocumentFormEnum.KEEP;
          ezsigndocumentRequestCompound.eEzsigndocumentFormat = EEzsigndocumentFormatEnum.PDF;
          ezsigndocumentRequestCompound.eEzsigndocumentSource = EEzsigndocumentSourceEnum.BASE64;
          ezsigndocumentRequestCompound.fkiEzsignfolderID = 33;
          ezsigndocumentRequestCompound.fkiEzsignfoldersignerassociationID = 20;
          ezsigndocumentRequestCompound.fkiEzsigntemplateID = 36;
          ezsigndocumentRequestCompound.fkiLanguageID = 2;
          ezsigndocumentRequestCompound.pkiEzsigndocumentID = 97;
          ezsigndocumentRequestCompound.sEzsigndocumentBase64 = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
          ezsigndocumentRequestCompound.sEzsigndocumentExternalid = '{"ID": 1234, "TAGS": ["tag1", "tag2", "tag3"]}';
          ezsigndocumentRequestCompound.sEzsigndocumentName = 'Contract #123';
          ezsigndocumentRequestCompound.sEzsigndocumentPassword = 'SecretPassword123';
          ezsigndocumentRequestCompound.sEzsigndocumentUrl = 'http://www.example.com/document.pdf';
        return ezsigndocumentRequestCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof EzsigndocumentRequestCompound) {           
            EzsigndocumentRequestCompound ezsigndocumentRequestCompound = (EzsigndocumentRequestCompound) obj;
            return this.bEzsigndocumentForcerepair == ezsigndocumentRequestCompound.bEzsigndocumentForcerepair
                && this.dtEzsigndocumentDuedate == ezsigndocumentRequestCompound.dtEzsigndocumentDuedate
                && this.eEzsigndocumentForm == ezsigndocumentRequestCompound.eEzsigndocumentForm
                && this.eEzsigndocumentFormat == ezsigndocumentRequestCompound.eEzsigndocumentFormat
                && this.eEzsigndocumentSource == ezsigndocumentRequestCompound.eEzsigndocumentSource
                && this.fkiEzsignfolderID == ezsigndocumentRequestCompound.fkiEzsignfolderID
                && this.fkiEzsignfoldersignerassociationID == ezsigndocumentRequestCompound.fkiEzsignfoldersignerassociationID
                && this.fkiEzsigntemplateID == ezsigndocumentRequestCompound.fkiEzsigntemplateID
                && this.fkiLanguageID == ezsigndocumentRequestCompound.fkiLanguageID
                && this.pkiEzsigndocumentID == ezsigndocumentRequestCompound.pkiEzsigndocumentID
                && this.sEzsigndocumentBase64 == ezsigndocumentRequestCompound.sEzsigndocumentBase64
                && this.sEzsigndocumentExternalid == ezsigndocumentRequestCompound.sEzsigndocumentExternalid
                && this.sEzsigndocumentName == ezsigndocumentRequestCompound.sEzsigndocumentName
                && this.sEzsigndocumentPassword == ezsigndocumentRequestCompound.sEzsigndocumentPassword
                && this.sEzsigndocumentUrl == ezsigndocumentRequestCompound.sEzsigndocumentUrl;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (bEzsigndocumentForcerepair == null ? 0 : System.hashCode(bEzsigndocumentForcerepair));
        hashCode = (17 * hashCode) + (dtEzsigndocumentDuedate == null ? 0 : System.hashCode(dtEzsigndocumentDuedate));
        hashCode = (17 * hashCode) + (eEzsigndocumentForm == null ? 0 : System.hashCode(eEzsigndocumentForm));
        hashCode = (17 * hashCode) + (eEzsigndocumentFormat == null ? 0 : System.hashCode(eEzsigndocumentFormat));
        hashCode = (17 * hashCode) + (eEzsigndocumentSource == null ? 0 : System.hashCode(eEzsigndocumentSource));
        hashCode = (17 * hashCode) + (fkiEzsignfolderID == null ? 0 : System.hashCode(fkiEzsignfolderID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationID == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationID));
        hashCode = (17 * hashCode) + (fkiEzsigntemplateID == null ? 0 : System.hashCode(fkiEzsigntemplateID));
        hashCode = (17 * hashCode) + (fkiLanguageID == null ? 0 : System.hashCode(fkiLanguageID));
        hashCode = (17 * hashCode) + (pkiEzsigndocumentID == null ? 0 : System.hashCode(pkiEzsigndocumentID));
        hashCode = (17 * hashCode) + (sEzsigndocumentBase64 == null ? 0 : System.hashCode(sEzsigndocumentBase64));
        hashCode = (17 * hashCode) + (sEzsigndocumentExternalid == null ? 0 : System.hashCode(sEzsigndocumentExternalid));
        hashCode = (17 * hashCode) + (sEzsigndocumentName == null ? 0 : System.hashCode(sEzsigndocumentName));
        hashCode = (17 * hashCode) + (sEzsigndocumentPassword == null ? 0 : System.hashCode(sEzsigndocumentPassword));
        hashCode = (17 * hashCode) + (sEzsigndocumentUrl == null ? 0 : System.hashCode(sEzsigndocumentUrl));
        return hashCode;
    }
}

