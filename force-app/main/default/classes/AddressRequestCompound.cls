/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Address Object and children to create a complete structure
 */
public class AddressRequestCompound implements AddressRequest {
    /**
     * The unique ID of the Addresstype.\n\nValid values:\n\n|Value|Description|\n|-|-|\n|1|Office|\n|2|Home|\n|3|Real Estate Invoice|\n|4|Invoicing|\n|5|Shipping|
     * minimum: 0
     * @return fkiAddresstypeID
     */
    public Integer fkiAddresstypeID { get; set; }

    /**
     * The Civic number.
     * @return sAddressCivic
     */
    public String sAddressCivic { get; set; }

    /**
     * The Street Name
     * @return sAddressStreet
     */
    public String sAddressStreet { get; set; }

    /**
     * The Suite or appartment number
     * @return sAddressSuite
     */
    public String sAddressSuite { get; set; }

    /**
     * The City name
     * @return sAddressCity
     */
    public String sAddressCity { get; set; }

    /**
     * The unique ID of the Province.\n\nHere are some common values (Complete list must be retrieved from API):\n\n|Value|Description|\n|-|-|\n|1|(Canada) Alberta\n|2|(Canada) British Columbia|\n|3|(Canada) Manitoba|\n|3|(Canada) Manitoba|\n|4|(Canada) New Brunswick|\n|5|(Canada) Newfoundland|\n|6|(Canada) Northwest Territories|\n|7|(Canada) Nova Scotia|\n|8|(Canada) Nunavut|\n|9|(Canada) Ontario|\n|10|(Canada) Prince Edward Island|\n|11|(Canada) Quebec|\n|12|(Canada) Saskatchewan|\n|13|(Canada) Yukon|\n|14|(United-States) Alabama|\n|15|(United-States) Alaska|\n|16|(United-States) Arizona|\n|17|(United-States) Arkansas|\n|18|(United-States) California|\n|19|(United-States) Colorado|\n|20|(United-States) Connecticut|\n|21|(United-States) Delaware|\n|22|(United-States) District of Columbia|\n|23|(United-States) Florida|\n|24|(United-States) Georgia|\n|25|(United-States) Hawaii|\n|26|(United-States) Idaho|\n|27|(United-States) Illinois|\n|28|(United-States) Indiana|\n|29|(United-States) Iowa|\n|30|(United-States) Kansas|\n|31|(United-States) Kentucky|\n|32|(United-States) Louisiane|\n|33|(United-States) Maine|\n|34|(United-States) Maryland|\n|35|(United-States) Massachusetts|\n|36|(United-States) Michigan|\n|37|(United-States) Minnesota|\n|38|(United-States) Mississippi|\n|39|(United-States) Missouri|\n|40|(United-States) Montana|\n|41|(United-States) Nebraska|\n|42|(United-States) Nevada|\n|43|(United-States) New Hampshire|\n|44|(United-States) New Jersey|\n|45|(United-States) New Mexico|\n|46|(United-States) New York|\n|47|(United-States) North Carolina|\n|48|(United-States) North Dakota|\n|49|(United-States) Ohio|\n|50|(United-States) Oklahoma|\n|51|(United-States) Oregon|\n|52|(United-States) Pennsylvania|\n|53|(United-States) Rhode Island|\n|54|(United-States) South Carolina|\n|55|(United-States) South Dakota|\n|56|(United-States) Tennessee|\n|57|(United-States) Texas|\n|58|(United-States) Utah|\n|60|(United-States) Vermont|\n|59|(United-States) Virginia|\n|61|(United-States) Washington|\n|62|(United-States) West Virginia|\n|63|(United-States) Wisconsin|\n|64|(United-States) Wyoming|
     * minimum: 0
     * @return fkiProvinceID
     */
    public Integer fkiProvinceID { get; set; }

    /**
     * The unique ID of the Country.\n\nHere are some common values (Complete list must be retrieved from API):\n\n|Value|Description|\n|-|-|\n|1|Canada|\n|2|United-States|
     * minimum: 0
     * @return fkiCountryID
     */
    public Integer fkiCountryID { get; set; }

    /**
     * The Postal/Zip Code\n\nThe value must be entered without spaces
     * @return sAddressZip
     */
    public String sAddressZip { get; set; }

    public static AddressRequestCompound getExample() {
        AddressRequestCompound addressRequestCompound = new AddressRequestCompound();
          addressRequestCompound.fkiAddresstypeID = 1;
          addressRequestCompound.sAddressCivic = '2540';
          addressRequestCompound.sAddressStreet = 'Daniel-Johnson Blvd.';
          addressRequestCompound.sAddressSuite = '610';
          addressRequestCompound.sAddressCity = 'Laval';
          addressRequestCompound.fkiProvinceID = 11;
          addressRequestCompound.fkiCountryID = 1;
          addressRequestCompound.sAddressZip = 'H7T2S3';
        return addressRequestCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof AddressRequestCompound) {           
            AddressRequestCompound addressRequestCompound = (AddressRequestCompound) obj;
            return this.fkiAddresstypeID == addressRequestCompound.fkiAddresstypeID
                && this.sAddressCivic == addressRequestCompound.sAddressCivic
                && this.sAddressStreet == addressRequestCompound.sAddressStreet
                && this.sAddressSuite == addressRequestCompound.sAddressSuite
                && this.sAddressCity == addressRequestCompound.sAddressCity
                && this.fkiProvinceID == addressRequestCompound.fkiProvinceID
                && this.fkiCountryID == addressRequestCompound.fkiCountryID
                && this.sAddressZip == addressRequestCompound.sAddressZip;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fkiAddresstypeID == null ? 0 : System.hashCode(fkiAddresstypeID));
        hashCode = (17 * hashCode) + (sAddressCivic == null ? 0 : System.hashCode(sAddressCivic));
        hashCode = (17 * hashCode) + (sAddressStreet == null ? 0 : System.hashCode(sAddressStreet));
        hashCode = (17 * hashCode) + (sAddressSuite == null ? 0 : System.hashCode(sAddressSuite));
        hashCode = (17 * hashCode) + (sAddressCity == null ? 0 : System.hashCode(sAddressCity));
        hashCode = (17 * hashCode) + (fkiProvinceID == null ? 0 : System.hashCode(fkiProvinceID));
        hashCode = (17 * hashCode) + (fkiCountryID == null ? 0 : System.hashCode(fkiCountryID));
        hashCode = (17 * hashCode) + (sAddressZip == null ? 0 : System.hashCode(sAddressZip));
        return hashCode;
    }
}

