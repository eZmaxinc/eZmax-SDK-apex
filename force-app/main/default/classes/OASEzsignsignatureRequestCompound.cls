/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignsignature Object and children to create a complete structure
 */
public class OASEzsignsignatureRequestCompound implements OASEzsignsignatureRequest, OAS.MappedProperties {
    /**
     * The unique ID of the Ezsignsignature
     * minimum: 0
     * @return pkiEzsignsignatureID
     */
    public Integer pkiEzsignsignatureID { get; set; }

    /**
     * The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return fkiEzsignfoldersignerassociationID
     */
    public Integer fkiEzsignfoldersignerassociationID { get; set; }

    /**
     * The page number in the Ezsigndocument
     * minimum: 1
     * @return iEzsignpagePagenumber
     */
    public Integer iEzsignpagePagenumber { get; set; }

    /**
     * The X coordinate (Horizontal) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use "200" for the X coordinate.
     * minimum: 0
     * @return iEzsignsignatureX
     */
    public Integer iEzsignsignatureX { get; set; }

    /**
     * The Y coordinate (Vertical) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use "300" for the Y coordinate.
     * minimum: 0
     * @return iEzsignsignatureY
     */
    public Integer iEzsignsignatureY { get; set; }

    /**
     * The width of the Ezsignsignature.\n\nSize is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use "200" for the iEzsignsignatureWidth.
     * minimum: 0
     * @return iEzsignsignatureWidth
     */
    public Integer iEzsignsignatureWidth { get; set; }

    /**
     * The height of the Ezsignsignature.\n\nSize is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use "200" for the iEzsignsignatureHeight.
     * minimum: 0
     * @return iEzsignsignatureHeight
     */
    public Integer iEzsignsignatureHeight { get; set; }

    /**
     * The step when the Ezsignsigner will be invited to sign
     * @return iEzsignsignatureStep
     */
    public Integer iEzsignsignatureStep { get; set; }

    /**
     * Get eEzsignsignatureType
     * @return eEzsignsignatureType
     */
    public OASFieldEEzsignsignatureType eEzsignsignatureType { get; set; }

    /**
     * The unique ID of the Ezsigndocument
     * minimum: 0
     * @return fkiEzsigndocumentID
     */
    public Integer fkiEzsigndocumentID { get; set; }

    /**
     * A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
     * @return tEzsignsignatureTooltip
     */
    public String tEzsignsignatureTooltip { get; set; }

    /**
     * Get eEzsignsignatureTooltipposition
     * @return eEzsignsignatureTooltipposition
     */
    public OASFieldEEzsignsignatureTooltipposit eEzsignsignatureTooltipposition { get; set; }

    /**
     * Get eEzsignsignatureFont
     * @return eEzsignsignatureFont
     */
    public OASFieldEEzsignsignatureFont eEzsignsignatureFont { get; set; }

    /**
     * The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return fkiEzsignfoldersignerassociationIDValidation
     */
    public Integer fkiEzsignfoldersignerassociationIDValidation { get; set; }

    /**
     * Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments.
     * @return bEzsignsignatureRequired
     */
    public Boolean bEzsignsignatureRequired { get; set; }

    /**
     * Get eEzsignsignatureAttachmentnamesource
     * @return eEzsignsignatureAttachmentnamesource
     */
    public OASFieldEEzsignsignatureAttachmentna eEzsignsignatureAttachmentnamesource { get; set; }

    /**
     * The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
     * @return sEzsignsignatureAttachmentdescription
     */
    public String sEzsignsignatureAttachmentdescription { get; set; }

    /**
     * The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
     * @return iEzsignsignatureValidationstep
     */
    public Integer iEzsignsignatureValidationstep { get; set; }

    /**
     * The maximum length for the value in the Ezsignsignature\n\nThis can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**
     * minimum: 0
     * maximum: 65535
     * @return iEzsignsignatureMaxlength
     */
    public Integer iEzsignsignatureMaxlength { get; set; }

    /**
     * Get eEzsignsignatureTextvalidation
     * @return eEzsignsignatureTextvalidation
     */
    public OASEnumTextvalidation eEzsignsignatureTextvalidation { get; set; }

    /**
     * A regular expression to indicate what values are acceptable for the Ezsignsignature.\n\nThis can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
     * @return sEzsignsignatureRegexp
     */
    public String sEzsignsignatureRegexp { get; set; }

    /**
     * Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
     * @return bEzsignsignatureCustomdate
     */
    public Boolean bEzsignsignatureCustomdate { get; set; }

    /**
     * An array of custom date blocks that will be filled at the time of signature.\n\nCan only be used if bEzsignsignatureCustomdate is true.\n\nUse an empty array if you don\'t want to have a date at all.
     * @return aObjEzsignsignaturecustomdate
     */
    public List<OASEzsignsignaturecustomdateRequestC> aObjEzsignsignaturecustomdate { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'a_objEzsignsignaturecustomdate' => 'aObjEzsignsignaturecustomdate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASEzsignsignatureRequestCompound() {
        aObjEzsignsignaturecustomdate = new List<OASEzsignsignaturecustomdateRequestC>();
    }

    public static OASEzsignsignatureRequestCompound getExample() {
        OASEzsignsignatureRequestCompound ezsignsignatureRequestCompound = new OASEzsignsignatureRequestCompound();
          ezsignsignatureRequestCompound.pkiEzsignsignatureID = 49;
          ezsignsignatureRequestCompound.fkiEzsignfoldersignerassociationID = 20;
          ezsignsignatureRequestCompound.iEzsignpagePagenumber = 1;
          ezsignsignatureRequestCompound.iEzsignsignatureX = 200;
          ezsignsignatureRequestCompound.iEzsignsignatureY = 300;
          ezsignsignatureRequestCompound.iEzsignsignatureWidth = 200;
          ezsignsignatureRequestCompound.iEzsignsignatureHeight = 200;
          ezsignsignatureRequestCompound.iEzsignsignatureStep = 1;
          ezsignsignatureRequestCompound.eEzsignsignatureType = OASFieldEEzsignsignatureType.getExample();
          ezsignsignatureRequestCompound.fkiEzsigndocumentID = 97;
          ezsignsignatureRequestCompound.tEzsignsignatureTooltip = 'Please sign here if you agree to the terms';
          ezsignsignatureRequestCompound.eEzsignsignatureTooltipposition = OASFieldEEzsignsignatureTooltipposit.getExample();
          ezsignsignatureRequestCompound.eEzsignsignatureFont = OASFieldEEzsignsignatureFont.getExample();
          ezsignsignatureRequestCompound.fkiEzsignfoldersignerassociationIDValidation = 20;
          ezsignsignatureRequestCompound.bEzsignsignatureRequired = true;
          ezsignsignatureRequestCompound.eEzsignsignatureAttachmentnamesource = OASFieldEEzsignsignatureAttachmentna.getExample();
          ezsignsignatureRequestCompound.sEzsignsignatureAttachmentdescription = 'Attachment';
          ezsignsignatureRequestCompound.iEzsignsignatureValidationstep = 1;
          ezsignsignatureRequestCompound.iEzsignsignatureMaxlength = 75;
          ezsignsignatureRequestCompound.eEzsignsignatureTextvalidation = OASEnumTextvalidation.getExample();
          ezsignsignatureRequestCompound.sEzsignsignatureRegexp = '/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/';
          ezsignsignatureRequestCompound.bEzsignsignatureCustomdate = true;
          ezsignsignatureRequestCompound.aObjEzsignsignaturecustomdate = new List<OASEzsignsignaturecustomdateRequestC>{OASEzsignsignaturecustomdateRequestC.getExample()};
        return ezsignsignatureRequestCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignsignatureRequestCompound) {           
            OASEzsignsignatureRequestCompound ezsignsignatureRequestCompound = (OASEzsignsignatureRequestCompound) obj;
            return this.pkiEzsignsignatureID == ezsignsignatureRequestCompound.pkiEzsignsignatureID
                && this.fkiEzsignfoldersignerassociationID == ezsignsignatureRequestCompound.fkiEzsignfoldersignerassociationID
                && this.iEzsignpagePagenumber == ezsignsignatureRequestCompound.iEzsignpagePagenumber
                && this.iEzsignsignatureX == ezsignsignatureRequestCompound.iEzsignsignatureX
                && this.iEzsignsignatureY == ezsignsignatureRequestCompound.iEzsignsignatureY
                && this.iEzsignsignatureWidth == ezsignsignatureRequestCompound.iEzsignsignatureWidth
                && this.iEzsignsignatureHeight == ezsignsignatureRequestCompound.iEzsignsignatureHeight
                && this.iEzsignsignatureStep == ezsignsignatureRequestCompound.iEzsignsignatureStep
                && this.eEzsignsignatureType == ezsignsignatureRequestCompound.eEzsignsignatureType
                && this.fkiEzsigndocumentID == ezsignsignatureRequestCompound.fkiEzsigndocumentID
                && this.tEzsignsignatureTooltip == ezsignsignatureRequestCompound.tEzsignsignatureTooltip
                && this.eEzsignsignatureTooltipposition == ezsignsignatureRequestCompound.eEzsignsignatureTooltipposition
                && this.eEzsignsignatureFont == ezsignsignatureRequestCompound.eEzsignsignatureFont
                && this.fkiEzsignfoldersignerassociationIDValidation == ezsignsignatureRequestCompound.fkiEzsignfoldersignerassociationIDValidation
                && this.bEzsignsignatureRequired == ezsignsignatureRequestCompound.bEzsignsignatureRequired
                && this.eEzsignsignatureAttachmentnamesource == ezsignsignatureRequestCompound.eEzsignsignatureAttachmentnamesource
                && this.sEzsignsignatureAttachmentdescription == ezsignsignatureRequestCompound.sEzsignsignatureAttachmentdescription
                && this.iEzsignsignatureValidationstep == ezsignsignatureRequestCompound.iEzsignsignatureValidationstep
                && this.iEzsignsignatureMaxlength == ezsignsignatureRequestCompound.iEzsignsignatureMaxlength
                && this.eEzsignsignatureTextvalidation == ezsignsignatureRequestCompound.eEzsignsignatureTextvalidation
                && this.sEzsignsignatureRegexp == ezsignsignatureRequestCompound.sEzsignsignatureRegexp
                && this.bEzsignsignatureCustomdate == ezsignsignatureRequestCompound.bEzsignsignatureCustomdate
                && this.aObjEzsignsignaturecustomdate == ezsignsignatureRequestCompound.aObjEzsignsignaturecustomdate;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignsignatureID == null ? 0 : System.hashCode(pkiEzsignsignatureID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationID == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationID));
        hashCode = (17 * hashCode) + (iEzsignpagePagenumber == null ? 0 : System.hashCode(iEzsignpagePagenumber));
        hashCode = (17 * hashCode) + (iEzsignsignatureX == null ? 0 : System.hashCode(iEzsignsignatureX));
        hashCode = (17 * hashCode) + (iEzsignsignatureY == null ? 0 : System.hashCode(iEzsignsignatureY));
        hashCode = (17 * hashCode) + (iEzsignsignatureWidth == null ? 0 : System.hashCode(iEzsignsignatureWidth));
        hashCode = (17 * hashCode) + (iEzsignsignatureHeight == null ? 0 : System.hashCode(iEzsignsignatureHeight));
        hashCode = (17 * hashCode) + (iEzsignsignatureStep == null ? 0 : System.hashCode(iEzsignsignatureStep));
        hashCode = (17 * hashCode) + (eEzsignsignatureType == null ? 0 : System.hashCode(eEzsignsignatureType));
        hashCode = (17 * hashCode) + (fkiEzsigndocumentID == null ? 0 : System.hashCode(fkiEzsigndocumentID));
        hashCode = (17 * hashCode) + (tEzsignsignatureTooltip == null ? 0 : System.hashCode(tEzsignsignatureTooltip));
        hashCode = (17 * hashCode) + (eEzsignsignatureTooltipposition == null ? 0 : System.hashCode(eEzsignsignatureTooltipposition));
        hashCode = (17 * hashCode) + (eEzsignsignatureFont == null ? 0 : System.hashCode(eEzsignsignatureFont));
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationIDValidation == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationIDValidation));
        hashCode = (17 * hashCode) + (bEzsignsignatureRequired == null ? 0 : System.hashCode(bEzsignsignatureRequired));
        hashCode = (17 * hashCode) + (eEzsignsignatureAttachmentnamesource == null ? 0 : System.hashCode(eEzsignsignatureAttachmentnamesource));
        hashCode = (17 * hashCode) + (sEzsignsignatureAttachmentdescription == null ? 0 : System.hashCode(sEzsignsignatureAttachmentdescription));
        hashCode = (17 * hashCode) + (iEzsignsignatureValidationstep == null ? 0 : System.hashCode(iEzsignsignatureValidationstep));
        hashCode = (17 * hashCode) + (iEzsignsignatureMaxlength == null ? 0 : System.hashCode(iEzsignsignatureMaxlength));
        hashCode = (17 * hashCode) + (eEzsignsignatureTextvalidation == null ? 0 : System.hashCode(eEzsignsignatureTextvalidation));
        hashCode = (17 * hashCode) + (sEzsignsignatureRegexp == null ? 0 : System.hashCode(sEzsignsignatureRegexp));
        hashCode = (17 * hashCode) + (bEzsignsignatureCustomdate == null ? 0 : System.hashCode(bEzsignsignatureCustomdate));
        hashCode = (17 * hashCode) + (aObjEzsignsignaturecustomdate == null ? 0 : System.hashCode(aObjEzsignsignaturecustomdate));
        return hashCode;
    }
}

