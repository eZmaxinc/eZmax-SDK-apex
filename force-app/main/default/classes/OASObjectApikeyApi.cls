/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASObjectApikeyApi {
    OASClient client;

    public OASObjectApikeyApi(OASClient client) {
        this.client = client;
    }

    public OASObjectApikeyApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a new Apikey
     * The endpoint allows to create one or many elements at once.
     * @param oaSApikeyCreateObjectV2Request  (required)
     * @return OASApikeyCreateObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyCreateObjectV2Response apikeyCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSApikeyCreateObjectV2Request'), 'oaSApikeyCreateObjectV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyCreateObjectV2Response) client.invoke(
            'POST', '/2/object/apikey',
            (OASApikeyCreateObjectV2Request) params.get('oaSApikeyCreateObjectV2Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASApikeyCreateObjectV2Response.class
        );
    }
    /**
     * Edit an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param oaSApikeyEditObjectV1Request  (required)
     * @return OASApikeyEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyEditObjectV1Response apikeyEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        client.assertNotNull(params.get('oaSApikeyEditObjectV1Request'), 'oaSApikeyEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyEditObjectV1Response) client.invoke(
            'PUT', '/1/object/apikey/{pkiApikeyID}',
            (OASApikeyEditObjectV1Request) params.get('oaSApikeyEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASApikeyEditObjectV1Response.class
        );
    }
    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID  (required)
     * @param oaSApikeyEditPermissionsV1Request  (required)
     * @return OASApikeyEditPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyEditPermissionsV1Response apikeyEditPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        client.assertNotNull(params.get('oaSApikeyEditPermissionsV1Request'), 'oaSApikeyEditPermissionsV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyEditPermissionsV1Response) client.invoke(
            'PUT', '/1/object/apikey/{pkiApikeyID}/editPermissions',
            (OASApikeyEditPermissionsV1Request) params.get('oaSApikeyEditPermissionsV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASApikeyEditPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing Apikey\&#39;s cors
     * 
     * @param pkiApikeyID  (required)
     * @return OASApikeyGetCorsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyGetCorsV1Response apikeyGetCorsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyGetCorsV1Response) client.invoke(
            'GET', '/1/object/apikey/{pkiApikeyID}/getCors', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASApikeyGetCorsV1Response.class
        );
    }
    /**
     * Retrieve Apikey list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return OASApikeyGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyGetListV1Response apikeyGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyGetListV1Response) client.invoke(
            'GET', '/1/object/apikey/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASApikeyGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @return OASApikeyGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyGetObjectV2Response apikeyGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyGetObjectV2Response) client.invoke(
            'GET', '/2/object/apikey/{pkiApikeyID}', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASApikeyGetObjectV2Response.class
        );
    }
    /**
     * Retrieve an existing Apikey\&#39;s Permissions
     * 
     * @param pkiApikeyID  (required)
     * @return OASApikeyGetPermissionsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyGetPermissionsV1Response apikeyGetPermissionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyGetPermissionsV1Response) client.invoke(
            'GET', '/1/object/apikey/{pkiApikeyID}/getPermissions', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASApikeyGetPermissionsV1Response.class
        );
    }
    /**
     * Retrieve an existing Apikey\&#39;s subnets
     * 
     * @param pkiApikeyID  (required)
     * @return OASApikeyGetSubnetsV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyGetSubnetsV1Response apikeyGetSubnetsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyGetSubnetsV1Response) client.invoke(
            'GET', '/1/object/apikey/{pkiApikeyID}/getSubnets', '',
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASApikeyGetSubnetsV1Response.class
        );
    }
    /**
     * Regenerate the Apikey
     * 
     * @param pkiApikeyID  (required)
     * @param oaSApikeyRegenerateV1Request  (required)
     * @return OASApikeyRegenerateV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApikeyRegenerateV1Response apikeyRegenerateV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiApikeyID'), 'pkiApikeyID');
        client.assertNotNull(params.get('oaSApikeyRegenerateV1Request'), 'oaSApikeyRegenerateV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApikeyRegenerateV1Response) client.invoke(
            'POST', '/1/object/apikey/{pkiApikeyID}/regenerate',
            (OASApikeyRegenerateV1Request) params.get('oaSApikeyRegenerateV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiApikeyID' => (Integer) params.get('pkiApikeyID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASApikeyRegenerateV1Response.class
        );
    }
}
