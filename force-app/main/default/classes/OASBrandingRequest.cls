/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * A Branding Object
 */
public class OASBrandingRequest {
    /**
     * The unique ID of the Branding
     * minimum: 0
     * @return pkiBrandingID
     */
    public Integer pkiBrandingID { get; set; }

    /**
     * Get objBrandingDescription
     * @return objBrandingDescription
     */
    public OASMultilingualBrandingDescription objBrandingDescription { get; set; }

    /**
     * Get eBrandingLogo
     * @return eBrandingLogo
     */
    public OASFieldEBrandingLogo eBrandingLogo { get; set; }

    /**
     * The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogo if you supply an image. If you select \'Default\', the logo will be deleted and the default one will be used.
     * @return sBrandingBase64
     */
    public Blob sBrandingBase64 { get; set; }

    /**
     * The color of the text. This is a RGB color converted into integer
     * minimum: 0
     * maximum: 16777215
     * @return iBrandingColortext
     */
    public Integer iBrandingColortext { get; set; }

    /**
     * The color of the text in the link box. This is a RGB color converted into integer
     * minimum: 0
     * maximum: 16777215
     * @return iBrandingColortextlinkbox
     */
    public Integer iBrandingColortextlinkbox { get; set; }

    /**
     * The color of the text in the button. This is a RGB color converted into integer
     * minimum: 0
     * maximum: 16777215
     * @return iBrandingColortextbutton
     */
    public Integer iBrandingColortextbutton { get; set; }

    /**
     * The color of the background. This is a RGB color converted into integer
     * minimum: 0
     * maximum: 16777215
     * @return iBrandingColorbackground
     */
    public Integer iBrandingColorbackground { get; set; }

    /**
     * The color of the background of the button. This is a RGB color converted into integer
     * minimum: 0
     * maximum: 16777215
     * @return iBrandingColorbackgroundbutton
     */
    public Integer iBrandingColorbackgroundbutton { get; set; }

    /**
     * The color of the background of the small box. This is a RGB color converted into integer
     * minimum: 0
     * maximum: 16777215
     * @return iBrandingColorbackgroundsmallbox
     */
    public Integer iBrandingColorbackgroundsmallbox { get; set; }

    /**
     * Whether the Branding is active or not
     * @return bBrandingIsactive
     */
    public Boolean bBrandingIsactive { get; set; }

    public static OASBrandingRequest getExample() {
        OASBrandingRequest brandingRequest = new OASBrandingRequest();
          brandingRequest.pkiBrandingID = 78;
          brandingRequest.objBrandingDescription = OASMultilingualBrandingDescription.getExample();
          brandingRequest.eBrandingLogo = OASFieldEBrandingLogo.getExample();
          brandingRequest.sBrandingBase64 = EncodingUtil.base64Decode('[B@32811494');
          brandingRequest.iBrandingColortext = 3752795;
          brandingRequest.iBrandingColortextlinkbox = 0;
          brandingRequest.iBrandingColortextbutton = 16777215;
          brandingRequest.iBrandingColorbackground = 15658734;
          brandingRequest.iBrandingColorbackgroundbutton = 13577007;
          brandingRequest.iBrandingColorbackgroundsmallbox = 16777215;
          brandingRequest.bBrandingIsactive = true;
        return brandingRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASBrandingRequest) {           
            OASBrandingRequest brandingRequest = (OASBrandingRequest) obj;
            return this.pkiBrandingID == brandingRequest.pkiBrandingID
                && this.objBrandingDescription == brandingRequest.objBrandingDescription
                && this.eBrandingLogo == brandingRequest.eBrandingLogo
                && this.sBrandingBase64 == brandingRequest.sBrandingBase64
                && this.iBrandingColortext == brandingRequest.iBrandingColortext
                && this.iBrandingColortextlinkbox == brandingRequest.iBrandingColortextlinkbox
                && this.iBrandingColortextbutton == brandingRequest.iBrandingColortextbutton
                && this.iBrandingColorbackground == brandingRequest.iBrandingColorbackground
                && this.iBrandingColorbackgroundbutton == brandingRequest.iBrandingColorbackgroundbutton
                && this.iBrandingColorbackgroundsmallbox == brandingRequest.iBrandingColorbackgroundsmallbox
                && this.bBrandingIsactive == brandingRequest.bBrandingIsactive;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiBrandingID == null ? 0 : System.hashCode(pkiBrandingID));
        hashCode = (17 * hashCode) + (objBrandingDescription == null ? 0 : System.hashCode(objBrandingDescription));
        hashCode = (17 * hashCode) + (eBrandingLogo == null ? 0 : System.hashCode(eBrandingLogo));
        hashCode = (17 * hashCode) + (sBrandingBase64 == null ? 0 : System.hashCode(sBrandingBase64));
        hashCode = (17 * hashCode) + (iBrandingColortext == null ? 0 : System.hashCode(iBrandingColortext));
        hashCode = (17 * hashCode) + (iBrandingColortextlinkbox == null ? 0 : System.hashCode(iBrandingColortextlinkbox));
        hashCode = (17 * hashCode) + (iBrandingColortextbutton == null ? 0 : System.hashCode(iBrandingColortextbutton));
        hashCode = (17 * hashCode) + (iBrandingColorbackground == null ? 0 : System.hashCode(iBrandingColorbackground));
        hashCode = (17 * hashCode) + (iBrandingColorbackgroundbutton == null ? 0 : System.hashCode(iBrandingColorbackgroundbutton));
        hashCode = (17 * hashCode) + (iBrandingColorbackgroundsmallbox == null ? 0 : System.hashCode(iBrandingColorbackgroundsmallbox));
        hashCode = (17 * hashCode) + (bBrandingIsactive == null ? 0 : System.hashCode(bBrandingIsactive));
        return hashCode;
    }
}

