/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignfolder Object and children to create a complete structure
 */
public class OASEzsignfolderRequestCompound implements OASEzsignfolderRequest {
    /**
     * The unique ID of the Ezsignfolder
     * minimum: 0
     * @return pkiEzsignfolderID
     */
    public Integer pkiEzsignfolderID { get; set; }

    /**
     * The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The description of the Ezsignfolder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * Note about the Ezsignfolder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public OASFieldEEzsignfolderSendreminderfre eEzsignfolderSendreminderfrequency { get; set; }

    public static OASEzsignfolderRequestCompound getExample() {
        OASEzsignfolderRequestCompound ezsignfolderRequestCompound = new OASEzsignfolderRequestCompound();
          ezsignfolderRequestCompound.pkiEzsignfolderID = 33;
          ezsignfolderRequestCompound.fkiEzsignfoldertypeID = 5;
          ezsignfolderRequestCompound.fkiEzsigntsarequirementID = 1;
          ezsignfolderRequestCompound.sEzsignfolderDescription = 'Test eZsign Folder';
          ezsignfolderRequestCompound.tEzsignfolderNote = 'This is a note';
          ezsignfolderRequestCompound.eEzsignfolderSendreminderfrequency = OASFieldEEzsignfolderSendreminderfre.getExample();
        return ezsignfolderRequestCompound;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignfolderRequestCompound) {           
            OASEzsignfolderRequestCompound ezsignfolderRequestCompound = (OASEzsignfolderRequestCompound) obj;
            return this.pkiEzsignfolderID == ezsignfolderRequestCompound.pkiEzsignfolderID
                && this.fkiEzsignfoldertypeID == ezsignfolderRequestCompound.fkiEzsignfoldertypeID
                && this.fkiEzsigntsarequirementID == ezsignfolderRequestCompound.fkiEzsigntsarequirementID
                && this.sEzsignfolderDescription == ezsignfolderRequestCompound.sEzsignfolderDescription
                && this.tEzsignfolderNote == ezsignfolderRequestCompound.tEzsignfolderNote
                && this.eEzsignfolderSendreminderfrequency == ezsignfolderRequestCompound.eEzsignfolderSendreminderfrequency;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignfolderID == null ? 0 : System.hashCode(pkiEzsignfolderID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        return hashCode;
    }
}

