/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class ObjectEzsigndocumentApi {
    Client client;

    public ObjectEzsigndocumentApi(Client client) {
        this.client = client;
    }

    public ObjectEzsigndocumentApi() {
        this.client = new Client();
    }

    public Client getClient() {
        return this.client;
    }

    /**
     * Apply an Ezsigntemplate to the Ezsigndocument.
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital &quot;E&quot; to normalize the nomenclature.\n\nThis endpoint applies a predefined template to the ezsign document.\nThis allows to automatically apply all the form and signature fields on a document in a single step.\n\nThe document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV1R  (required)
     * @return EzsigndocumentApplyEzsigntemplateV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentApplyEzsigntemplateV1R ezsigndocumentApplyEzsigntemplateV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentApplyEzsigntemplateV1R'), 'ezsigndocumentApplyEzsigntemplateV1R');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentApplyEzsigntemplateV1R) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate',
            (EzsigndocumentApplyEzsigntemplateV1R) params.get('ezsigndocumentApplyEzsigntemplateV1R'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentApplyEzsigntemplateV1R.class
        );
    }
    /**
     * Apply an Ezsigntemplate to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document.\nThis allows to automatically apply all the form and signature fields on a document in a single step.\n\nThe document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV2R  (required)
     * @return EzsigndocumentApplyEzsigntemplateV2R
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentApplyEzsigntemplateV2R ezsigndocumentApplyEzsigntemplateV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentApplyEzsigntemplateV2R'), 'ezsigndocumentApplyEzsigntemplateV2R');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentApplyEzsigntemplateV2R) client.invoke(
            'POST', '/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate',
            (EzsigndocumentApplyEzsigntemplateV2R) params.get('ezsigndocumentApplyEzsigntemplateV2R'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentApplyEzsigntemplateV2R.class
        );
    }
    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.\n\nThe array can contain simple (Just the object) or compound (The object and its child) objects.\n\nCreating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @return EzsigndocumentCreateObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentCreateObjectV1Response ezsigndocumentCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('ezsigndocumentCreateObjectV1Request'), 'ezsigndocumentCreateObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentCreateObjectV1Response) client.invoke(
            'POST', '/1/object/ezsigndocument',
            (List<EzsigndocumentCreateObjectV1Request>) params.get('ezsigndocumentCreateObjectV1Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentCreateObjectV1Response.class
        );
    }
    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.
     * @param ezsigndocumentCreateObjectV2Request  (required)
     * @return EzsigndocumentCreateObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentCreateObjectV2Response ezsigndocumentCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('ezsigndocumentCreateObjectV2Request'), 'ezsigndocumentCreateObjectV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentCreateObjectV2Response) client.invoke(
            'POST', '/2/object/ezsigndocument',
            (EzsigndocumentCreateObjectV2Request) params.get('ezsigndocumentCreateObjectV2Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentCreateObjectV2Response.class
        );
    }
    /**
     * Decline to sign
     * Decline to sign
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentDeclineToSignV1Request  (required)
     * @return EzsigndocumentDeclineToSignV1Respons
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentDeclineToSignV1Respons ezsigndocumentDeclineToSignV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentDeclineToSignV1Request'), 'ezsigndocumentDeclineToSignV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentDeclineToSignV1Respons) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/declineToSign',
            (EzsigndocumentDeclineToSignV1Request) params.get('ezsigndocumentDeclineToSignV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentDeclineToSignV1Respons.class
        );
    }
    /**
     * Delete an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentDeleteObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentDeleteObjectV1Response ezsigndocumentDeleteObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentDeleteObjectV1Response) client.invoke(
            'DELETE', '/1/object/ezsigndocument/{pkiEzsigndocumentID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentDeleteObjectV1Response.class
        );
    }
    /**
     * Edit multiple Ezsignformfieldgroups
     * Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentEditEzsignformfieldgro  (required)
     * @return EzsigndocumentEditEzsignformfieldgro
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentEditEzsignformfieldgro ezsigndocumentEditEzsignformfieldgroupsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentEditEzsignformfieldgro'), 'ezsigndocumentEditEzsignformfieldgro');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentEditEzsignformfieldgro) client.invoke(
            'PUT', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignformfieldgroups',
            (EzsigndocumentEditEzsignformfieldgro) params.get('ezsigndocumentEditEzsignformfieldgro'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentEditEzsignformfieldgro.class
        );
    }
    /**
     * Edit multiple Ezsignsignatures
     * Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentEditEzsignsignaturesV1  (required)
     * @return EzsigndocumentEditEzsignsignaturesV1
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentEditEzsignsignaturesV1 ezsigndocumentEditEzsignsignaturesV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentEditEzsignsignaturesV1'), 'ezsigndocumentEditEzsignsignaturesV1');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentEditEzsignsignaturesV1) client.invoke(
            'PUT', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures',
            (EzsigndocumentEditEzsignsignaturesV1) params.get('ezsigndocumentEditEzsignsignaturesV1'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentEditEzsignsignaturesV1.class
        );
    }
    /**
     * End prematurely
     * End prematurely an Ezsigndocument when some signatures are still required
     * @param pkiEzsigndocumentID  (required)
     * @param body  (required)
     * @return EzsigndocumentEndPrematurelyV1Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentEndPrematurelyV1Respon ezsigndocumentEndPrematurelyV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentEndPrematurelyV1Respon) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentEndPrematurelyV1Respon.class
        );
    }
    /**
     * Flatten
     * Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
     * @param pkiEzsigndocumentID  (required)
     * @param body  (required)
     * @return EzsigndocumentFlattenV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentFlattenV1Response ezsigndocumentFlattenV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentFlattenV1Response) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/flatten',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentFlattenV1Response.class
        );
    }
    /**
     * Retrieve actionable elements for the Ezsigndocument
     * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetActionableElementsV
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetActionableElementsV ezsigndocumentGetActionableElementsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetActionableElementsV) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getActionableElements', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetActionableElementsV.class
        );
    }
    /**
     * Retrieve completed elements for the Ezsigndocument
     * Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetCompletedElementsV1
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetCompletedElementsV1 ezsigndocumentGetCompletedElementsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetCompletedElementsV1) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getCompletedElements', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetCompletedElementsV1.class
        );
    }
    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.\n\nThese links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID  (required)
     * @param eDocumentType The type of document to retrieve.\n\n1. **Initial** Is the initial document before any signature were applied.\n2. **SignatureReady** Is the version containing the annotations/form to show the signer.\n3. **Signed** Is the final document once all signatures were applied.\n4. **Proofdocument** Is the evidence report.\n5. **Proof** Is the complete evidence archive including all of the above and more.\n (required)
     * @return EzsigndocumentGetDownloadUrlV1Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetDownloadUrlV1Respon ezsigndocumentGetDownloadUrlV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('eDocumentType'), 'eDocumentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetDownloadUrlV1Respon) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID'),
                'eDocumentType' => (String) params.get('eDocumentType')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetDownloadUrlV1Respon.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Ezsignannotations
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetEzsignannotationsV1
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetEzsignannotationsV1 ezsigndocumentGetEzsignannotationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetEzsignannotationsV1) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignannotations', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetEzsignannotationsV1.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Ezsignformfieldgroups
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetEzsignformfieldgrou
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetEzsignformfieldgrou ezsigndocumentGetEzsignformfieldgroupsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetEzsignformfieldgrou) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignformfieldgroups', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetEzsignformfieldgrou.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Ezsignpages
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetEzsignpagesV1Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetEzsignpagesV1Respon ezsigndocumentGetEzsignpagesV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetEzsignpagesV1Respon) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetEzsignpagesV1Respon.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetEzsignsignaturesAut
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetEzsignsignaturesAut ezsigndocumentGetEzsignsignaturesAutomaticV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetEzsignsignaturesAut) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignaturesAutomatic', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetEzsignsignaturesAut.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Ezsignsignatures
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetEzsignsignaturesV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetEzsignsignaturesV1R ezsigndocumentGetEzsignsignaturesV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetEzsignsignaturesV1R) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignatures', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetEzsignsignaturesV1R.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Form Data
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetFormDataV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetFormDataV1Response ezsigndocumentGetFormDataV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetFormDataV1Response) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'application/zip', 'text/csv' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetFormDataV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetObjectV1Response) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetObjectV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetObjectV2Response ezsigndocumentGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetObjectV2Response) client.invoke(
            'GET', '/2/object/ezsigndocument/{pkiEzsigndocumentID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetObjectV2Response.class
        );
    }
    /**
     * Retrieve the temporary proof
     * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn\&#39;t available until the Ezsigndocument is completed
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetTemporaryProofV1Res
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetTemporaryProofV1Res ezsigndocumentGetTemporaryProofV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetTemporaryProofV1Res) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            EzsigndocumentGetTemporaryProofV1Res.class
        );
    }
    /**
     * Retrieve positions X,Y of given words from a Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentGetWordsPositionsV1Req  (required)
     * @return EzsigndocumentGetWordsPositionsV1Res
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentGetWordsPositionsV1Res ezsigndocumentGetWordsPositionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentGetWordsPositionsV1Req'), 'ezsigndocumentGetWordsPositionsV1Req');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentGetWordsPositionsV1Res) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions',
            (EzsigndocumentGetWordsPositionsV1Req) params.get('ezsigndocumentGetWordsPositionsV1Req'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentGetWordsPositionsV1Res.class
        );
    }
    /**
     * Patch an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentPatchObjectV1Request  (required)
     * @return EzsigndocumentPatchObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentPatchObjectV1Response ezsigndocumentPatchObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentPatchObjectV1Request'), 'ezsigndocumentPatchObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentPatchObjectV1Response) client.invoke(
            'PATCH', '/1/object/ezsigndocument/{pkiEzsigndocumentID}',
            (EzsigndocumentPatchObjectV1Request) params.get('ezsigndocumentPatchObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentPatchObjectV1Response.class
        );
    }
    /**
     * Submit the Ezsignform
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentSubmitEzsignformV1Requ  (required)
     * @return EzsigndocumentSubmitEzsignformV1Resp
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentSubmitEzsignformV1Resp ezsigndocumentSubmitEzsignformV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('ezsigndocumentSubmitEzsignformV1Requ'), 'ezsigndocumentSubmitEzsignformV1Requ');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentSubmitEzsignformV1Resp) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/submitEzsignform',
            (EzsigndocumentSubmitEzsignformV1Requ) params.get('ezsigndocumentSubmitEzsignformV1Requ'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentSubmitEzsignformV1Resp.class
        );
    }
    /**
     * Unsend the Ezsigndocument
     * Once an Ezsigndocument has been sent to signatories, it cannot be modified.\n\nUsing this endpoint, you can unsend the Ezsigndocument and make it modifiable again.\n\nSignatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.\n\n⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
     * @param pkiEzsigndocumentID  (required)
     * @param body  (required)
     * @return EzsigndocumentUnsendV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public EzsigndocumentUnsendV1Response ezsigndocumentUnsendV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (EzsigndocumentUnsendV1Response) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/unsend',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            EzsigndocumentUnsendV1Response.class
        );
    }
}
