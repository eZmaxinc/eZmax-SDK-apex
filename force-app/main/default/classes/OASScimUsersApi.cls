/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASScimUsersApi {
    OASClient client;

    public OASScimUsersApi(OASClient client) {
        this.client = client;
    }

    public OASScimUsersApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a new User
     * 
     * @param oaSScimUser  (required)
     * @return OASScimUser
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScimUser usersCreateObjectScimV2(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSScimUser'), 'oaSScimUser');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScimUser) client.invoke(
            'POST', '/2/scim/Users',
            (OASScimUser) params.get('oaSScimUser'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Bearer' },
            OASScimUser.class
        );
    }
    /**
     * Delete an existing User
     * 
     * @param userId  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void usersDeleteObjectScimV2(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/2/scim/Users/{userId}', '',
            query, form,
            new Map<String, Object>{
                'userId' => (String) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'Bearer' },
            null
        );
    }
    /**
     * Edit an existing User
     * 
     * @param userId  (required)
     * @param oaSScimUser  (required)
     * @return OASScimUser
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScimUser usersEditObjectScimV2(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        client.assertNotNull(params.get('oaSScimUser'), 'oaSScimUser');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScimUser) client.invoke(
            'PUT', '/2/scim/Users/{userId}',
            (OASScimUser) params.get('oaSScimUser'),
            query, form,
            new Map<String, Object>{
                'userId' => (String) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Bearer' },
            OASScimUser.class
        );
    }
    /**
     * Retrieve User list
     * 
     * @param filter Filter expression for searching users (optional)
     * @return OASScimUserList
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScimUserList usersGetListScimV2(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter', (String) params.get('filter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScimUserList) client.invoke(
            'GET', '/2/scim/Users', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Bearer' },
            OASScimUserList.class
        );
    }
    /**
     * Retrieve an existing User
     * 
     * @param userId  (required)
     * @return OASScimUser
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScimUser usersGetObjectScimV2(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScimUser) client.invoke(
            'GET', '/2/scim/Users/{userId}', '',
            query, form,
            new Map<String, Object>{
                'userId' => (String) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Bearer' },
            OASScimUser.class
        );
    }
}
