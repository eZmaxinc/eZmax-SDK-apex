/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.46
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignfolder Object
 */
public class OASEzsignfolderRequest {
    /**
     * The unique ID of the Ezsignfoldertype.\r\n\r\nThis value can be queried by the API and is also visible in the admin interface.\r\n\r\nThere are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
     * @return fkiEzsignfoldertypeID
     */
    public Integer fkiEzsignfoldertypeID { get; set; }

    /**
     * The unique ID of the Ezsigntsarequirement.\n\nDetermine if a Time Stamping Authority should add a timestamp on each of the signature.\nValid values:\n\n|Value|Description|\n|-|-|\n|1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.|\n|2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**|\n|3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return fkiEzsigntsarequirementID
     */
    public Integer fkiEzsigntsarequirementID { get; set; }

    /**
     * The description of the Ezsign Folder
     * @return sEzsignfolderDescription
     */
    public String sEzsignfolderDescription { get; set; }

    /**
     * Somes extra notes about the eZsign Folder
     * @return tEzsignfolderNote
     */
    public String tEzsignfolderNote { get; set; }

    /**
     * Get eEzsignfolderSendreminderfrequency
     * @return eEzsignfolderSendreminderfrequency
     */
    public OASFieldEEzsignfolderSendreminderfre eEzsignfolderSendreminderfrequency { get; set; }

    public static OASEzsignfolderRequest getExample() {
        OASEzsignfolderRequest ezsignfolderRequest = new OASEzsignfolderRequest();
          ezsignfolderRequest.fkiEzsignfoldertypeID = 5;
          ezsignfolderRequest.fkiEzsigntsarequirementID = 92;
          ezsignfolderRequest.sEzsignfolderDescription = '';
          ezsignfolderRequest.tEzsignfolderNote = '';
          ezsignfolderRequest.eEzsignfolderSendreminderfrequency = OASFieldEEzsignfolderSendreminderfre.getExample();
        return ezsignfolderRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignfolderRequest) {           
            OASEzsignfolderRequest ezsignfolderRequest = (OASEzsignfolderRequest) obj;
            return this.fkiEzsignfoldertypeID == ezsignfolderRequest.fkiEzsignfoldertypeID
                && this.fkiEzsigntsarequirementID == ezsignfolderRequest.fkiEzsigntsarequirementID
                && this.sEzsignfolderDescription == ezsignfolderRequest.sEzsignfolderDescription
                && this.tEzsignfolderNote == ezsignfolderRequest.tEzsignfolderNote
                && this.eEzsignfolderSendreminderfrequency == ezsignfolderRequest.eEzsignfolderSendreminderfrequency;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fkiEzsignfoldertypeID == null ? 0 : System.hashCode(fkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (fkiEzsigntsarequirementID == null ? 0 : System.hashCode(fkiEzsigntsarequirementID));
        hashCode = (17 * hashCode) + (sEzsignfolderDescription == null ? 0 : System.hashCode(sEzsignfolderDescription));
        hashCode = (17 * hashCode) + (tEzsignfolderNote == null ? 0 : System.hashCode(tEzsignfolderNote));
        hashCode = (17 * hashCode) + (eEzsignfolderSendreminderfrequency == null ? 0 : System.hashCode(eEzsignfolderSendreminderfrequency));
        return hashCode;
    }
}

