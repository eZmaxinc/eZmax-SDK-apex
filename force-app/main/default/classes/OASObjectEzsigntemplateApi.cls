/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASObjectEzsigntemplateApi {
    OASClient client;

    public OASObjectEzsigntemplateApi(OASClient client) {
        this.client = client;
    }

    public OASObjectEzsigntemplateApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Copy the Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID  (required)
     * @param oaSEzsigntemplateCopyV1Request  (required)
     * @return OASEzsigntemplateCopyV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateCopyV1Response ezsigntemplateCopyV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigntemplateID'), 'pkiEzsigntemplateID');
        client.assertNotNull(params.get('oaSEzsigntemplateCopyV1Request'), 'oaSEzsigntemplateCopyV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateCopyV1Response) client.invoke(
            'POST', '/1/object/ezsigntemplate/{pkiEzsigntemplateID}/copy',
            (OASEzsigntemplateCopyV1Request) params.get('oaSEzsigntemplateCopyV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigntemplateID' => (Integer) params.get('pkiEzsigntemplateID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigntemplateCopyV1Response.class
        );
    }
    /**
     * Create a new Ezsigntemplate
     * The endpoint allows to create one or many elements at once.
     * @param oaSEzsigntemplateCreateObjectV1Reque  (required)
     * @return OASEzsigntemplateCreateObjectV1Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateCreateObjectV1Respo ezsigntemplateCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSEzsigntemplateCreateObjectV1Reque'), 'oaSEzsigntemplateCreateObjectV1Reque');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateCreateObjectV1Respo) client.invoke(
            'POST', '/1/object/ezsigntemplate',
            (OASEzsigntemplateCreateObjectV1Reque) params.get('oaSEzsigntemplateCreateObjectV1Reque'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigntemplateCreateObjectV1Respo.class
        );
    }
    /**
     * Delete an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID  (required)
     * @return OASEzsigntemplateDeleteObjectV1Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateDeleteObjectV1Respo ezsigntemplateDeleteObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigntemplateID'), 'pkiEzsigntemplateID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateDeleteObjectV1Respo) client.invoke(
            'DELETE', '/1/object/ezsigntemplate/{pkiEzsigntemplateID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigntemplateID' => (Integer) params.get('pkiEzsigntemplateID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigntemplateDeleteObjectV1Respo.class
        );
    }
    /**
     * Edit an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID  (required)
     * @param oaSEzsigntemplateEditObjectV1Request  (required)
     * @return OASEzsigntemplateEditObjectV1Respons
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateEditObjectV1Respons ezsigntemplateEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigntemplateID'), 'pkiEzsigntemplateID');
        client.assertNotNull(params.get('oaSEzsigntemplateEditObjectV1Request'), 'oaSEzsigntemplateEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateEditObjectV1Respons) client.invoke(
            'PUT', '/1/object/ezsigntemplate/{pkiEzsigntemplateID}',
            (OASEzsigntemplateEditObjectV1Request) params.get('oaSEzsigntemplateEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigntemplateID' => (Integer) params.get('pkiEzsigntemplateID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigntemplateEditObjectV1Respons.class
        );
    }
    /**
     * Retrieve Ezsigntemplates and IDs
     * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsigntemplates to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return OASEzsigntemplateGetAutocompleteV2Re
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateGetAutocompleteV2Re ezsigntemplateGetAutocompleteV2(Map<String, Object> params) {
        client.assertNotNull(params.get('sSelector'), 'sSelector');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eFilterActive', (String) params.get('eFilterActive')));
        query.addAll(client.makeParam('sQuery', (String) params.get('sQuery')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateGetAutocompleteV2Re) client.invoke(
            'GET', '/2/object/ezsigntemplate/getAutocomplete/{sSelector}', '',
            query, form,
            new Map<String, Object>{
                'sSelector' => (String) params.get('sSelector')
            },
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigntemplateGetAutocompleteV2Re.class
        );
    }
    /**
     * Retrieve Ezsigntemplate list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|\n| eEzsigntemplateType | Company&lt;br&gt;Team&lt;br&gt;User&lt;br&gt;Usergroup |\n
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return OASEzsigntemplateGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateGetListV1Response ezsigntemplateGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateGetListV1Response) client.invoke(
            'GET', '/1/object/ezsigntemplate/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigntemplateGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID  (required)
     * @return OASEzsigntemplateGetObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateGetObjectV1Response ezsigntemplateGetObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigntemplateID'), 'pkiEzsigntemplateID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateGetObjectV1Response) client.invoke(
            'GET', '/1/object/ezsigntemplate/{pkiEzsigntemplateID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigntemplateID' => (Integer) params.get('pkiEzsigntemplateID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigntemplateGetObjectV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID  (required)
     * @return OASEzsigntemplateGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigntemplateGetObjectV2Response ezsigntemplateGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigntemplateID'), 'pkiEzsigntemplateID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigntemplateGetObjectV2Response) client.invoke(
            'GET', '/2/object/ezsigntemplate/{pkiEzsigntemplateID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigntemplateID' => (Integer) params.get('pkiEzsigntemplateID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigntemplateGetObjectV2Response.class
        );
    }
}
