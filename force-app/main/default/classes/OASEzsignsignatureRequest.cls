/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.43
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * An Ezsignsignature Object
 */
public class OASEzsignsignatureRequest {
    /**
     * A reference to a valid Ezsignfoldersignerassociation.\n\nThat value is returned after a successful Ezsignfoldersignerassociation Creation.\n
     * @return fkiEzsignfoldersignerassociationID
     */
    public Integer fkiEzsignfoldersignerassociationID { get; set; }

    /**
     * The page number in the document where to apply the signature
     * @return iEzsignpagePagenumber
     */
    public Integer iEzsignpagePagenumber { get; set; }

    /**
     * The X coordinate (Horizontal) where to put the signature block on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the signature block 2 inches from the left border of the page, you would use "200" for the X coordinate.
     * @return iEzsignsignatureX
     */
    public Integer iEzsignsignatureX { get; set; }

    /**
     * The Y coordinate (Vertical) where to put the signature block on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the signature block 3 inches from the top border of the page, you would use "300" for the Y coordinate.
     * @return iEzsignsignatureY
     */
    public Integer iEzsignsignatureY { get; set; }

    /**
     * The step when the Ezsignsigner will be invited to sign.\n\nFor example, if you say iEzsignsignatureStep=2, that block of signature will be available for signature only after ALL the signatures in step 1 are completed.
     * @return iEzsignsignatureStep
     */
    public Integer iEzsignsignatureStep { get; set; }

    /**
     * The type of signature required.\n\n1. **Acknowledgement** is for an acknowledgment of receipt.\n2. **Handwritten** is for a handwritten kind of signature where users needs to "draw" their signature on screen.\n3. **Initials** is a simple "click to add initials" block.\n4. **Name** is a simple "Click to sign" block. This is the most common block of signature.
     */
    public enum EEzsignsignatureTypeEnum {
        ACKNOWLEDGEMENT,
        HANDWRITTEN,
        INITIALS,
        NAME
    }

    /**
     * The type of signature required.\n\n1. **Acknowledgement** is for an acknowledgment of receipt.\n2. **Handwritten** is for a handwritten kind of signature where users needs to "draw" their signature on screen.\n3. **Initials** is a simple "click to add initials" block.\n4. **Name** is a simple "Click to sign" block. This is the most common block of signature.
     * @return eEzsignsignatureType
     */
    public EEzsignsignatureTypeEnum eEzsignsignatureType { get; set; }

    /**
     * A reference to a valid Ezsigndocument.\n\nThat value is returned after a successful Ezsigndocumentation Creation.
     * @return fkiEzsigndocumentID
     */
    public Integer fkiEzsigndocumentID { get; set; }

    public static OASEzsignsignatureRequest getExample() {
        OASEzsignsignatureRequest ezsignsignatureRequest = new OASEzsignsignatureRequest();
          ezsignsignatureRequest.fkiEzsignfoldersignerassociationID = 0;
          ezsignsignatureRequest.iEzsignpagePagenumber = 0;
          ezsignsignatureRequest.iEzsignsignatureX = 0;
          ezsignsignatureRequest.iEzsignsignatureY = 0;
          ezsignsignatureRequest.iEzsignsignatureStep = 0;
          ezsignsignatureRequest.eEzsignsignatureType = EEzsignsignatureTypeEnum.ACKNOWLEDGEMENT;
          ezsignsignatureRequest.fkiEzsigndocumentID = 0;
        return ezsignsignatureRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsignsignatureRequest) {           
            OASEzsignsignatureRequest ezsignsignatureRequest = (OASEzsignsignatureRequest) obj;
            return this.fkiEzsignfoldersignerassociationID == ezsignsignatureRequest.fkiEzsignfoldersignerassociationID
                && this.iEzsignpagePagenumber == ezsignsignatureRequest.iEzsignpagePagenumber
                && this.iEzsignsignatureX == ezsignsignatureRequest.iEzsignsignatureX
                && this.iEzsignsignatureY == ezsignsignatureRequest.iEzsignsignatureY
                && this.iEzsignsignatureStep == ezsignsignatureRequest.iEzsignsignatureStep
                && this.eEzsignsignatureType == ezsignsignatureRequest.eEzsignsignatureType
                && this.fkiEzsigndocumentID == ezsignsignatureRequest.fkiEzsigndocumentID;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationID == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationID));
        hashCode = (17 * hashCode) + (iEzsignpagePagenumber == null ? 0 : System.hashCode(iEzsignpagePagenumber));
        hashCode = (17 * hashCode) + (iEzsignsignatureX == null ? 0 : System.hashCode(iEzsignsignatureX));
        hashCode = (17 * hashCode) + (iEzsignsignatureY == null ? 0 : System.hashCode(iEzsignsignatureY));
        hashCode = (17 * hashCode) + (iEzsignsignatureStep == null ? 0 : System.hashCode(iEzsignsignatureStep));
        hashCode = (17 * hashCode) + (eEzsignsignatureType == null ? 0 : System.hashCode(eEzsignsignatureType));
        hashCode = (17 * hashCode) + (fkiEzsigndocumentID == null ? 0 : System.hashCode(fkiEzsigndocumentID));
        return hashCode;
    }
}

