/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * A Textstylestatic Object
 */
public class TextstylestaticResponse {
    /**
     * The unique ID of the Textstylestatic
     * minimum: 0
     * @return pkiTextstylestaticID
     */
    public Integer pkiTextstylestaticID { get; set; }

    /**
     * The unique ID of the Font
     * minimum: 0
     * @return fkiFontID
     */
    public Integer fkiFontID { get; set; }

    /**
     * Whether the Textstylestatic is Bold or not
     * @return bTextstylestaticBold
     */
    public Boolean bTextstylestaticBold { get; set; }

    /**
     * Whether the Textstylestatic is Underline or not
     * @return bTextstylestaticUnderline
     */
    public Boolean bTextstylestaticUnderline { get; set; }

    /**
     * Whether the Textstylestatic is Italic or not
     * @return bTextstylestaticItalic
     */
    public Boolean bTextstylestaticItalic { get; set; }

    /**
     * Whether the Textstylestatic is Strikethrough or not
     * @return bTextstylestaticStrikethrough
     */
    public Boolean bTextstylestaticStrikethrough { get; set; }

    /**
     * The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795
     * minimum: 0
     * maximum: 16777215
     * @return iTextstylestaticFontcolor
     */
    public Integer iTextstylestaticFontcolor { get; set; }

    /**
     * The Size for the Font of the Textstylestatic
     * minimum: 1
     * maximum: 255
     * @return iTextstylestaticSize
     */
    public Integer iTextstylestaticSize { get; set; }

    public static TextstylestaticResponse getExample() {
        TextstylestaticResponse textstylestaticResponse = new TextstylestaticResponse();
          textstylestaticResponse.pkiTextstylestaticID = 216;
          textstylestaticResponse.fkiFontID = 1;
          textstylestaticResponse.bTextstylestaticBold = true;
          textstylestaticResponse.bTextstylestaticUnderline = true;
          textstylestaticResponse.bTextstylestaticItalic = true;
          textstylestaticResponse.bTextstylestaticStrikethrough = true;
          textstylestaticResponse.iTextstylestaticFontcolor = 3752795;
          textstylestaticResponse.iTextstylestaticSize = 12;
        return textstylestaticResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof TextstylestaticResponse) {           
            TextstylestaticResponse textstylestaticResponse = (TextstylestaticResponse) obj;
            return this.pkiTextstylestaticID == textstylestaticResponse.pkiTextstylestaticID
                && this.fkiFontID == textstylestaticResponse.fkiFontID
                && this.bTextstylestaticBold == textstylestaticResponse.bTextstylestaticBold
                && this.bTextstylestaticUnderline == textstylestaticResponse.bTextstylestaticUnderline
                && this.bTextstylestaticItalic == textstylestaticResponse.bTextstylestaticItalic
                && this.bTextstylestaticStrikethrough == textstylestaticResponse.bTextstylestaticStrikethrough
                && this.iTextstylestaticFontcolor == textstylestaticResponse.iTextstylestaticFontcolor
                && this.iTextstylestaticSize == textstylestaticResponse.iTextstylestaticSize;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiTextstylestaticID == null ? 0 : System.hashCode(pkiTextstylestaticID));
        hashCode = (17 * hashCode) + (fkiFontID == null ? 0 : System.hashCode(fkiFontID));
        hashCode = (17 * hashCode) + (bTextstylestaticBold == null ? 0 : System.hashCode(bTextstylestaticBold));
        hashCode = (17 * hashCode) + (bTextstylestaticUnderline == null ? 0 : System.hashCode(bTextstylestaticUnderline));
        hashCode = (17 * hashCode) + (bTextstylestaticItalic == null ? 0 : System.hashCode(bTextstylestaticItalic));
        hashCode = (17 * hashCode) + (bTextstylestaticStrikethrough == null ? 0 : System.hashCode(bTextstylestaticStrikethrough));
        hashCode = (17 * hashCode) + (iTextstylestaticFontcolor == null ? 0 : System.hashCode(iTextstylestaticFontcolor));
        hashCode = (17 * hashCode) + (iTextstylestaticSize == null ? 0 : System.hashCode(iTextstylestaticSize));
        return hashCode;
    }
}

