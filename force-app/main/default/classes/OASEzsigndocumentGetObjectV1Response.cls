/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Payload for GET /1/object/ezsigndocument/{pkiEzsigndocumentID}
 */
public class OASEzsigndocumentGetObjectV1Response implements OASEzsigndocumentResponseCompound, OAS.MappedProperties {
    /**
     * The unique ID of the Ezsigndocument
     * minimum: 0
     * @return pkiEzsigndocumentID
     */
    public Integer pkiEzsigndocumentID { get; set; }

    /**
     * The unique ID of the Ezsignfolder
     * minimum: 0
     * @return fkiEzsignfolderID
     */
    public Integer fkiEzsignfolderID { get; set; }

    /**
     * The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return fkiEzsignfoldersignerassociationIDDeclinedtosign
     */
    public Integer fkiEzsignfoldersignerassociationIDDeclinedtosign { get; set; }

    /**
     * The maximum date and time at which the Ezsigndocument can be signed.
     * @return dtEzsigndocumentDuedate
     */
    public String dtEzsigndocumentDuedate { get; set; }

    /**
     * The date and time at which the Ezsignform has been completed.
     * @return dtEzsignformCompleted
     */
    public String dtEzsignformCompleted { get; set; }

    /**
     * The unique ID of the Language.\n\nValid values:\n\n|Value|Description|\n|-|-|\n|1|French|\n|2|English|
     * minimum: 1
     * maximum: 2
     * @return fkiLanguageID
     */
    public Integer fkiLanguageID { get; set; }

    /**
     * The name of the document that will be presented to Ezsignfoldersignerassociations
     * @return sEzsigndocumentName
     */
    public String sEzsigndocumentName { get; set; }

    /**
     * Get eEzsigndocumentStep
     * @return eEzsigndocumentStep
     */
    public OASFieldEEzsigndocumentStep eEzsigndocumentStep { get; set; }

    /**
     * The date and time when the Ezsigndocument was first sent.
     * @return dtEzsigndocumentFirstsend
     */
    public String dtEzsigndocumentFirstsend { get; set; }

    /**
     * The date and time when the Ezsigndocument was sent the last time.
     * @return dtEzsigndocumentLastsend
     */
    public String dtEzsigndocumentLastsend { get; set; }

    /**
     * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     * minimum: 1
     * @return iEzsigndocumentOrder
     */
    public Integer iEzsigndocumentOrder { get; set; }

    /**
     * The number of pages in the Ezsigndocument.
     * minimum: 1
     * @return iEzsigndocumentPagetotal
     */
    public Integer iEzsigndocumentPagetotal { get; set; }

    /**
     * The number of signatures that were signed in the document.
     * minimum: 0
     * @return iEzsigndocumentSignaturesigned
     */
    public Integer iEzsigndocumentSignaturesigned { get; set; }

    /**
     * The number of total signatures that were requested in the Ezsigndocument.
     * minimum: 0
     * @return iEzsigndocumentSignaturetotal
     */
    public Integer iEzsigndocumentSignaturetotal { get; set; }

    /**
     * MD5 Hash of the initial PDF Document before signatures were applied to it.
     * @return sEzsigndocumentMD5initial
     */
    public String sEzsigndocumentMD5initial { get; set; }

    /**
     * A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
     * @return tEzsigndocumentDeclinedtosignreason
     */
    public String tEzsigndocumentDeclinedtosignreason { get; set; }

    /**
     * MD5 Hash of the final PDF Document after all signatures were applied to it.
     * @return sEzsigndocumentMD5signed
     */
    public String sEzsigndocumentMD5signed { get; set; }

    /**
     * If the Ezsigndocument contains an Ezsignform or not
     * @return bEzsigndocumentEzsignform
     */
    public Boolean bEzsigndocumentEzsignform { get; set; }

    /**
     * If the Ezsigndocument contains signed signatures (From internal or external sources)
     * @return bEzsigndocumentHassignedsignatures
     */
    public Boolean bEzsigndocumentHassignedsignatures { get; set; }

    /**
     * Get objAudit
     * @return objAudit
     */
    public OASCommonAudit objAudit { get; set; }

    /**
     * This field can be used to store an External ID from the client\'s system.\n\nAnything can be stored in this field, it will never be evaluated by the eZmax system and will be returned\nAS-IS.\n\nTo store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.\n
     * @return sEzsigndocumentExternalid
     */
    public String sEzsigndocumentExternalid { get; set; }

    /**
     * Get eEzsigndocumentSteptype
     * @return eEzsigndocumentSteptype
     */
    public OASComputedEEzsigndocumentSteptype eEzsigndocumentSteptype { get; set; }

    /**
     * The total number of steps in the form filling phase
     * @return iEzsigndocumentStepformtotal
     */
    public Integer iEzsigndocumentStepformtotal { get; set; }

    /**
     * The current step in the form filling phase
     * @return iEzsigndocumentStepformcurrent
     */
    public Integer iEzsigndocumentStepformcurrent { get; set; }

    /**
     * The total number of steps in the signature filling phase
     * @return iEzsigndocumentStepsignaturetotal
     */
    public Integer iEzsigndocumentStepsignaturetotal { get; set; }

    /**
     * The current step in the signature phase
     * @return iEzsigndocumentStepsignatureCurrent
     */
    public Integer iEzsigndocumentStepsignatureCurrent { get; set; }

    /**
     * Get aObjEzsignfoldersignerassociationstatus
     * @return aObjEzsignfoldersignerassociationstatus
     */
    public List<OASCustomEzsignfoldersignerassociati> aObjEzsignfoldersignerassociationstatus { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'a_objEzsignfoldersignerassociationstatus' => 'aObjEzsignfoldersignerassociationstatus'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASEzsigndocumentGetObjectV1Response() {
        aObjEzsignfoldersignerassociationstatus = new List<OASCustomEzsignfoldersignerassociati>();
    }

    public static OASEzsigndocumentGetObjectV1Response getExample() {
        OASEzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1ResponseMPayload = new OASEzsigndocumentGetObjectV1Response();
          ezsigndocumentGetObjectV1ResponseMPayload.pkiEzsigndocumentID = 97;
          ezsigndocumentGetObjectV1ResponseMPayload.fkiEzsignfolderID = 33;
          ezsigndocumentGetObjectV1ResponseMPayload.fkiEzsignfoldersignerassociationIDDeclinedtosign = 20;
          ezsigndocumentGetObjectV1ResponseMPayload.dtEzsigndocumentDuedate = '2020-12-31 23:59:59';
          ezsigndocumentGetObjectV1ResponseMPayload.dtEzsignformCompleted = '2020-12-31 23:59:59';
          ezsigndocumentGetObjectV1ResponseMPayload.fkiLanguageID = 2;
          ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentName = 'Contract #123';
          ezsigndocumentGetObjectV1ResponseMPayload.eEzsigndocumentStep = OASFieldEEzsigndocumentStep.getExample();
          ezsigndocumentGetObjectV1ResponseMPayload.dtEzsigndocumentFirstsend = '2020-12-31 23:59:59';
          ezsigndocumentGetObjectV1ResponseMPayload.dtEzsigndocumentLastsend = '2020-12-31 23:59:59';
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentOrder = 1;
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentPagetotal = 4;
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentSignaturesigned = 3;
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentSignaturetotal = 4;
          ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentMD5initial = '012345678901234567890123456789AB';
          ezsigndocumentGetObjectV1ResponseMPayload.tEzsigndocumentDeclinedtosignreason = 'The conditions in the contract are different than those discuted';
          ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentMD5signed = '012345678901234567890123456789AB';
          ezsigndocumentGetObjectV1ResponseMPayload.bEzsigndocumentEzsignform = true;
          ezsigndocumentGetObjectV1ResponseMPayload.bEzsigndocumentHassignedsignatures = true;
          ezsigndocumentGetObjectV1ResponseMPayload.objAudit = OASCommonAudit.getExample();
          ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentExternalid = '{"ID": 1234, "TAGS": ["tag1", "tag2", "tag3"]}';
          ezsigndocumentGetObjectV1ResponseMPayload.eEzsigndocumentSteptype = OASComputedEEzsigndocumentSteptype.getExample();
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepformtotal = 2;
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepformcurrent = 1;
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepsignaturetotal = 2;
          ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepsignatureCurrent = 0;
          ezsigndocumentGetObjectV1ResponseMPayload.aObjEzsignfoldersignerassociationstatus = new List<OASCustomEzsignfoldersignerassociati>{OASCustomEzsignfoldersignerassociati.getExample()};
        return ezsigndocumentGetObjectV1ResponseMPayload;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEzsigndocumentGetObjectV1Response) {           
            OASEzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1ResponseMPayload = (OASEzsigndocumentGetObjectV1Response) obj;
            return this.pkiEzsigndocumentID == ezsigndocumentGetObjectV1ResponseMPayload.pkiEzsigndocumentID
                && this.fkiEzsignfolderID == ezsigndocumentGetObjectV1ResponseMPayload.fkiEzsignfolderID
                && this.fkiEzsignfoldersignerassociationIDDeclinedtosign == ezsigndocumentGetObjectV1ResponseMPayload.fkiEzsignfoldersignerassociationIDDeclinedtosign
                && this.dtEzsigndocumentDuedate == ezsigndocumentGetObjectV1ResponseMPayload.dtEzsigndocumentDuedate
                && this.dtEzsignformCompleted == ezsigndocumentGetObjectV1ResponseMPayload.dtEzsignformCompleted
                && this.fkiLanguageID == ezsigndocumentGetObjectV1ResponseMPayload.fkiLanguageID
                && this.sEzsigndocumentName == ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentName
                && this.eEzsigndocumentStep == ezsigndocumentGetObjectV1ResponseMPayload.eEzsigndocumentStep
                && this.dtEzsigndocumentFirstsend == ezsigndocumentGetObjectV1ResponseMPayload.dtEzsigndocumentFirstsend
                && this.dtEzsigndocumentLastsend == ezsigndocumentGetObjectV1ResponseMPayload.dtEzsigndocumentLastsend
                && this.iEzsigndocumentOrder == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentOrder
                && this.iEzsigndocumentPagetotal == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentPagetotal
                && this.iEzsigndocumentSignaturesigned == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentSignaturesigned
                && this.iEzsigndocumentSignaturetotal == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentSignaturetotal
                && this.sEzsigndocumentMD5initial == ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentMD5initial
                && this.tEzsigndocumentDeclinedtosignreason == ezsigndocumentGetObjectV1ResponseMPayload.tEzsigndocumentDeclinedtosignreason
                && this.sEzsigndocumentMD5signed == ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentMD5signed
                && this.bEzsigndocumentEzsignform == ezsigndocumentGetObjectV1ResponseMPayload.bEzsigndocumentEzsignform
                && this.bEzsigndocumentHassignedsignatures == ezsigndocumentGetObjectV1ResponseMPayload.bEzsigndocumentHassignedsignatures
                && this.objAudit == ezsigndocumentGetObjectV1ResponseMPayload.objAudit
                && this.sEzsigndocumentExternalid == ezsigndocumentGetObjectV1ResponseMPayload.sEzsigndocumentExternalid
                && this.eEzsigndocumentSteptype == ezsigndocumentGetObjectV1ResponseMPayload.eEzsigndocumentSteptype
                && this.iEzsigndocumentStepformtotal == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepformtotal
                && this.iEzsigndocumentStepformcurrent == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepformcurrent
                && this.iEzsigndocumentStepsignaturetotal == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepsignaturetotal
                && this.iEzsigndocumentStepsignatureCurrent == ezsigndocumentGetObjectV1ResponseMPayload.iEzsigndocumentStepsignatureCurrent
                && this.aObjEzsignfoldersignerassociationstatus == ezsigndocumentGetObjectV1ResponseMPayload.aObjEzsignfoldersignerassociationstatus;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsigndocumentID == null ? 0 : System.hashCode(pkiEzsigndocumentID));
        hashCode = (17 * hashCode) + (fkiEzsignfolderID == null ? 0 : System.hashCode(fkiEzsignfolderID));
        hashCode = (17 * hashCode) + (fkiEzsignfoldersignerassociationIDDeclinedtosign == null ? 0 : System.hashCode(fkiEzsignfoldersignerassociationIDDeclinedtosign));
        hashCode = (17 * hashCode) + (dtEzsigndocumentDuedate == null ? 0 : System.hashCode(dtEzsigndocumentDuedate));
        hashCode = (17 * hashCode) + (dtEzsignformCompleted == null ? 0 : System.hashCode(dtEzsignformCompleted));
        hashCode = (17 * hashCode) + (fkiLanguageID == null ? 0 : System.hashCode(fkiLanguageID));
        hashCode = (17 * hashCode) + (sEzsigndocumentName == null ? 0 : System.hashCode(sEzsigndocumentName));
        hashCode = (17 * hashCode) + (eEzsigndocumentStep == null ? 0 : System.hashCode(eEzsigndocumentStep));
        hashCode = (17 * hashCode) + (dtEzsigndocumentFirstsend == null ? 0 : System.hashCode(dtEzsigndocumentFirstsend));
        hashCode = (17 * hashCode) + (dtEzsigndocumentLastsend == null ? 0 : System.hashCode(dtEzsigndocumentLastsend));
        hashCode = (17 * hashCode) + (iEzsigndocumentOrder == null ? 0 : System.hashCode(iEzsigndocumentOrder));
        hashCode = (17 * hashCode) + (iEzsigndocumentPagetotal == null ? 0 : System.hashCode(iEzsigndocumentPagetotal));
        hashCode = (17 * hashCode) + (iEzsigndocumentSignaturesigned == null ? 0 : System.hashCode(iEzsigndocumentSignaturesigned));
        hashCode = (17 * hashCode) + (iEzsigndocumentSignaturetotal == null ? 0 : System.hashCode(iEzsigndocumentSignaturetotal));
        hashCode = (17 * hashCode) + (sEzsigndocumentMD5initial == null ? 0 : System.hashCode(sEzsigndocumentMD5initial));
        hashCode = (17 * hashCode) + (tEzsigndocumentDeclinedtosignreason == null ? 0 : System.hashCode(tEzsigndocumentDeclinedtosignreason));
        hashCode = (17 * hashCode) + (sEzsigndocumentMD5signed == null ? 0 : System.hashCode(sEzsigndocumentMD5signed));
        hashCode = (17 * hashCode) + (bEzsigndocumentEzsignform == null ? 0 : System.hashCode(bEzsigndocumentEzsignform));
        hashCode = (17 * hashCode) + (bEzsigndocumentHassignedsignatures == null ? 0 : System.hashCode(bEzsigndocumentHassignedsignatures));
        hashCode = (17 * hashCode) + (objAudit == null ? 0 : System.hashCode(objAudit));
        hashCode = (17 * hashCode) + (sEzsigndocumentExternalid == null ? 0 : System.hashCode(sEzsigndocumentExternalid));
        hashCode = (17 * hashCode) + (eEzsigndocumentSteptype == null ? 0 : System.hashCode(eEzsigndocumentSteptype));
        hashCode = (17 * hashCode) + (iEzsigndocumentStepformtotal == null ? 0 : System.hashCode(iEzsigndocumentStepformtotal));
        hashCode = (17 * hashCode) + (iEzsigndocumentStepformcurrent == null ? 0 : System.hashCode(iEzsigndocumentStepformcurrent));
        hashCode = (17 * hashCode) + (iEzsigndocumentStepsignaturetotal == null ? 0 : System.hashCode(iEzsigndocumentStepsignaturetotal));
        hashCode = (17 * hashCode) + (iEzsigndocumentStepsignatureCurrent == null ? 0 : System.hashCode(iEzsigndocumentStepsignatureCurrent));
        hashCode = (17 * hashCode) + (aObjEzsignfoldersignerassociationstatus == null ? 0 : System.hashCode(aObjEzsignfoldersignerassociationstatus));
        return hashCode;
    }
}

