/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * A Custom Ezsignfoldertype Object
 */
public class OASCustomEzsignfoldertypeResponse {
    /**
     * The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return pkiEzsignfoldertypeID
     */
    public Integer pkiEzsignfoldertypeID { get; set; }

    /**
     * The name of the Ezsignfoldertype in the language of the requester
     * @return sEzsignfoldertypeNameX
     */
    public String sEzsignfoldertypeNameX { get; set; }

    /**
     * Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @return bEzsignfoldertypeIncludeproofsigner
     */
    public Boolean bEzsignfoldertypeIncludeproofsigner { get; set; }

    /**
     * Whether we include the proof with the signed Ezsigndocument for users
     * @return bEzsignfoldertypeIncludeproofuser
     */
    public Boolean bEzsignfoldertypeIncludeproofuser { get; set; }

    /**
     * Wheter if delegation of signature is allowed to another user or not
     * @return bEzsignfoldertypeDelegate
     */
    public Boolean bEzsignfoldertypeDelegate { get; set; }

    /**
     * Wheter if Reassignment of signature is allowed to another signatory or not
     * @return bEzsignfoldertypeReassign
     */
    public Boolean bEzsignfoldertypeReassign { get; set; }

    public static OASCustomEzsignfoldertypeResponse getExample() {
        OASCustomEzsignfoldertypeResponse customEzsignfoldertypeResponse = new OASCustomEzsignfoldertypeResponse();
          customEzsignfoldertypeResponse.pkiEzsignfoldertypeID = 5;
          customEzsignfoldertypeResponse.sEzsignfoldertypeNameX = 'Default';
          customEzsignfoldertypeResponse.bEzsignfoldertypeIncludeproofsigner = true;
          customEzsignfoldertypeResponse.bEzsignfoldertypeIncludeproofuser = true;
          customEzsignfoldertypeResponse.bEzsignfoldertypeDelegate = true;
          customEzsignfoldertypeResponse.bEzsignfoldertypeReassign = true;
        return customEzsignfoldertypeResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCustomEzsignfoldertypeResponse) {           
            OASCustomEzsignfoldertypeResponse customEzsignfoldertypeResponse = (OASCustomEzsignfoldertypeResponse) obj;
            return this.pkiEzsignfoldertypeID == customEzsignfoldertypeResponse.pkiEzsignfoldertypeID
                && this.sEzsignfoldertypeNameX == customEzsignfoldertypeResponse.sEzsignfoldertypeNameX
                && this.bEzsignfoldertypeIncludeproofsigner == customEzsignfoldertypeResponse.bEzsignfoldertypeIncludeproofsigner
                && this.bEzsignfoldertypeIncludeproofuser == customEzsignfoldertypeResponse.bEzsignfoldertypeIncludeproofuser
                && this.bEzsignfoldertypeDelegate == customEzsignfoldertypeResponse.bEzsignfoldertypeDelegate
                && this.bEzsignfoldertypeReassign == customEzsignfoldertypeResponse.bEzsignfoldertypeReassign;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (pkiEzsignfoldertypeID == null ? 0 : System.hashCode(pkiEzsignfoldertypeID));
        hashCode = (17 * hashCode) + (sEzsignfoldertypeNameX == null ? 0 : System.hashCode(sEzsignfoldertypeNameX));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeIncludeproofsigner == null ? 0 : System.hashCode(bEzsignfoldertypeIncludeproofsigner));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeIncludeproofuser == null ? 0 : System.hashCode(bEzsignfoldertypeIncludeproofuser));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeDelegate == null ? 0 : System.hashCode(bEzsignfoldertypeDelegate));
        hashCode = (17 * hashCode) + (bEzsignfoldertypeReassign == null ? 0 : System.hashCode(bEzsignfoldertypeReassign));
        return hashCode;
    }
}

