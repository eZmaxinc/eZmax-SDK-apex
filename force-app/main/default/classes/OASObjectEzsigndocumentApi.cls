/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASObjectEzsigndocumentApi {
    OASClient client;

    public OASObjectEzsigndocumentApi(OASClient client) {
        this.client = client;
    }

    public OASObjectEzsigndocumentApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital &quot;E&quot; to normalize the nomenclature.\n\nThis endpoint applies a predefined template to the ezsign document.\nThis allows to automatically apply all the form and signature fields on a document in a single step.\n\nThe document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param oaSEzsigndocumentApplyEzsigntemplate  (required)
     * @return OASEzsigndocumentApplyEzsigntemplate
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentApplyEzsigntemplate ezsigndocumentApplyEzsigntemplateV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('oaSEzsigndocumentApplyEzsigntemplate'), 'oaSEzsigndocumentApplyEzsigntemplate');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentApplyEzsigntemplate) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate',
            (OASEzsigndocumentApplyEzsigntemplate) params.get('oaSEzsigndocumentApplyEzsigntemplate'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentApplyEzsigntemplate.class
        );
    }
    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document.\nThis allows to automatically apply all the form and signature fields on a document in a single step.\n\nThe document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param oaSEzsigndocumentApplyEzsigntemplate  (required)
     * @return OASEzsigndocumentApplyEzsigntemplate
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentApplyEzsigntemplate ezsigndocumentApplyEzsigntemplateV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('oaSEzsigndocumentApplyEzsigntemplate'), 'oaSEzsigndocumentApplyEzsigntemplate');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentApplyEzsigntemplate) client.invoke(
            'POST', '/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate',
            (OASEzsigndocumentApplyEzsigntemplate) params.get('oaSEzsigndocumentApplyEzsigntemplate'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentApplyEzsigntemplate.class
        );
    }
    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.\n\nThe array can contain simple (Just the object) or compound (The object and its child) objects.\n\nCreating compound elements allows to reduce the multiple requests to create all child objects.
     * @param oaSEzsigndocumentCreateObjectV1Reque  (required)
     * @return OASEzsigndocumentCreateObjectV1Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentCreateObjectV1Respo ezsigndocumentCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSEzsigndocumentCreateObjectV1Reque'), 'oaSEzsigndocumentCreateObjectV1Reque');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentCreateObjectV1Respo) client.invoke(
            'POST', '/1/object/ezsigndocument',
            (List<OASEzsigndocumentCreateObjectV1Reque>) params.get('oaSEzsigndocumentCreateObjectV1Reque'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentCreateObjectV1Respo.class
        );
    }
    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.
     * @param oaSEzsigndocumentCreateObjectV2Reque  (required)
     * @return OASEzsigndocumentCreateObjectV2Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentCreateObjectV2Respo ezsigndocumentCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSEzsigndocumentCreateObjectV2Reque'), 'oaSEzsigndocumentCreateObjectV2Reque');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentCreateObjectV2Respo) client.invoke(
            'POST', '/2/object/ezsigndocument',
            (OASEzsigndocumentCreateObjectV2Reque) params.get('oaSEzsigndocumentCreateObjectV2Reque'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentCreateObjectV2Respo.class
        );
    }
    /**
     * Delete an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return OASEzsigndocumentDeleteObjectV1Respo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentDeleteObjectV1Respo ezsigndocumentDeleteObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentDeleteObjectV1Respo) client.invoke(
            'DELETE', '/1/object/ezsigndocument/{pkiEzsigndocumentID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentDeleteObjectV1Respo.class
        );
    }
    /**
     * Edit multiple ezsignsignatures
     * Using this endpoint, you can edit multiple ezsignsignatures at the same time.
     * @param pkiEzsigndocumentID  (required)
     * @param oaSEzsigndocumentEditEzsignsignature  (required)
     * @return OASEzsigndocumentEditEzsignsignature
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentEditEzsignsignature ezsigndocumentEditEzsignsignaturesV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('oaSEzsigndocumentEditEzsignsignature'), 'oaSEzsigndocumentEditEzsignsignature');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentEditEzsignsignature) client.invoke(
            'PUT', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures',
            (OASEzsigndocumentEditEzsignsignature) params.get('oaSEzsigndocumentEditEzsignsignature'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentEditEzsignsignature.class
        );
    }
    /**
     * End prematurely
     * End prematurely an Ezsigndocument when some signatures are still required
     * @param pkiEzsigndocumentID  (required)
     * @return OASEzsigndocumentEndPrematurelyV1Res
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentEndPrematurelyV1Res ezsigndocumentEndPrematurelyV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentEndPrematurelyV1Res) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentEndPrematurelyV1Res.class
        );
    }
    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.\n\nThese links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID  (required)
     * @param eDocumentType The type of document to retrieve.\n\n1. **Initial** Is the initial document before any signature were applied.\n2. **Signed** Is the final document once all signatures were applied.\n3. **Proofdocument** Is the evidence report.\n4. **Proof** Is the complete evidence archive including all of the above and more.\n (required)
     * @return OASEzsigndocumentGetDownloadUrlV1Res
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentGetDownloadUrlV1Res ezsigndocumentGetDownloadUrlV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('eDocumentType'), 'eDocumentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentGetDownloadUrlV1Res) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID'),
                'eDocumentType' => (String) params.get('eDocumentType')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentGetDownloadUrlV1Res.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Ezsignpages
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return OASEzsigndocumentGetEzsignpagesV1Res
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentGetEzsignpagesV1Res ezsigndocumentGetEzsignpagesV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentGetEzsignpagesV1Res) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentGetEzsignpagesV1Res.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument\&#39;s Form Data
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return OASEzsigndocumentGetFormDataV1Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentGetFormDataV1Respon ezsigndocumentGetFormDataV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentGetFormDataV1Respon) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'application/zip', 'text/csv' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentGetFormDataV1Respon.class
        );
    }
    /**
     * Retrieve an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return OASEzsigndocumentGetObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentGetObjectV1Response) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentGetObjectV1Response.class
        );
    }
    /**
     * Retrieve the temporary proof
     * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn\&#39;t available until the Ezsigndocument is completed
     * @param pkiEzsigndocumentID  (required)
     * @return OASEzsigndocumentGetTemporaryProofV1
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentGetTemporaryProofV1 ezsigndocumentGetTemporaryProofV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentGetTemporaryProofV1) client.invoke(
            'GET', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsigndocumentGetTemporaryProofV1.class
        );
    }
    /**
     * Retrieve positions X,Y of given words from a Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param oaSEzsigndocumentGetWordsPositionsV1  (required)
     * @return OASEzsigndocumentGetWordsPositionsV1
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentGetWordsPositionsV1 ezsigndocumentGetWordsPositionsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('oaSEzsigndocumentGetWordsPositionsV1'), 'oaSEzsigndocumentGetWordsPositionsV1');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentGetWordsPositionsV1) client.invoke(
            'POST', '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions',
            (OASEzsigndocumentGetWordsPositionsV1) params.get('oaSEzsigndocumentGetWordsPositionsV1'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentGetWordsPositionsV1.class
        );
    }
    /**
     * Patch an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param oaSEzsigndocumentPatchObjectV1Reques  (required)
     * @return OASEzsigndocumentPatchObjectV1Respon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsigndocumentPatchObjectV1Respon ezsigndocumentPatchObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsigndocumentID'), 'pkiEzsigndocumentID');
        client.assertNotNull(params.get('oaSEzsigndocumentPatchObjectV1Reques'), 'oaSEzsigndocumentPatchObjectV1Reques');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsigndocumentPatchObjectV1Respon) client.invoke(
            'PATCH', '/1/object/ezsigndocument/{pkiEzsigndocumentID}',
            (OASEzsigndocumentPatchObjectV1Reques) params.get('oaSEzsigndocumentPatchObjectV1Reques'),
            query, form,
            new Map<String, Object>{
                'pkiEzsigndocumentID' => (Integer) params.get('pkiEzsigndocumentID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsigndocumentPatchObjectV1Respon.class
        );
    }
}
