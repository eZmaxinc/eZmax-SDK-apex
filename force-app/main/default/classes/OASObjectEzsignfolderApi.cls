/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASObjectEzsignfolderApi {
    OASClient client;

    public OASObjectEzsignfolderApi(OASClient client) {
        this.client = client;
    }

    public OASObjectEzsignfolderApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Archive the Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param body  (required)
     * @return OASEzsignfolderArchiveV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderArchiveV1Response ezsignfolderArchiveV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderArchiveV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/archive',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderArchiveV1Response.class
        );
    }
    /**
     * Download multiples files from an Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderBatchDownloadV1Reques  (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob ezsignfolderBatchDownloadV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderBatchDownloadV1Reques'), 'oaSEzsignfolderBatchDownloadV1Reques');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload',
            (OASEzsignfolderBatchDownloadV1Reques) params.get('oaSEzsignfolderBatchDownloadV1Reques'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/zip', 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            Blob.class
        );
    }
    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.\n\nThe array can contain simple (Just the object) or compound (The object and its child) objects.\n\nCreating compound elements allows to reduce the multiple requests to create all child objects.
     * @param oaSEzsignfolderCreateObjectV1Request  (required)
     * @return OASEzsignfolderCreateObjectV1Respons
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderCreateObjectV1Respons ezsignfolderCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSEzsignfolderCreateObjectV1Request'), 'oaSEzsignfolderCreateObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderCreateObjectV1Respons) client.invoke(
            'POST', '/1/object/ezsignfolder',
            (List<OASEzsignfolderCreateObjectV1Request>) params.get('oaSEzsignfolderCreateObjectV1Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderCreateObjectV1Respons.class
        );
    }
    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.
     * @param oaSEzsignfolderCreateObjectV2Request  (required)
     * @return OASEzsignfolderCreateObjectV2Respons
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderCreateObjectV2Respons ezsignfolderCreateObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSEzsignfolderCreateObjectV2Request'), 'oaSEzsignfolderCreateObjectV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderCreateObjectV2Respons) client.invoke(
            'POST', '/2/object/ezsignfolder',
            (OASEzsignfolderCreateObjectV2Request) params.get('oaSEzsignfolderCreateObjectV2Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderCreateObjectV2Respons.class
        );
    }
    /**
     * Delete an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderDeleteObjectV1Respons
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderDeleteObjectV1Respons ezsignfolderDeleteObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderDeleteObjectV1Respons) client.invoke(
            'DELETE', '/1/object/ezsignfolder/{pkiEzsignfolderID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderDeleteObjectV1Respons.class
        );
    }
    /**
     * Dispose Ezsignfolders
     * 
     * @param oaSEzsignfolderDisposeEzsignfoldersV  (required)
     * @return OASEzsignfolderDisposeEzsignfoldersV
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderDisposeEzsignfoldersV ezsignfolderDisposeEzsignfoldersV1(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSEzsignfolderDisposeEzsignfoldersV'), 'oaSEzsignfolderDisposeEzsignfoldersV');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderDisposeEzsignfoldersV) client.invoke(
            'POST', '/1/object/ezsignfolder/disposeEzsignfolders',
            (OASEzsignfolderDisposeEzsignfoldersV) params.get('oaSEzsignfolderDisposeEzsignfoldersV'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderDisposeEzsignfoldersV.class
        );
    }
    /**
     * Dispose the Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param body  (required)
     * @return OASEzsignfolderDisposeV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderDisposeV1Response ezsignfolderDisposeV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderDisposeV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderDisposeV1Response.class
        );
    }
    /**
     * Edit an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderEditObjectV1Request  (required)
     * @return OASEzsignfolderEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderEditObjectV1Response ezsignfolderEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderEditObjectV1Request'), 'oaSEzsignfolderEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderEditObjectV1Response) client.invoke(
            'PUT', '/1/object/ezsignfolder/{pkiEzsignfolderID}',
            (OASEzsignfolderEditObjectV1Request) params.get('oaSEzsignfolderEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderEditObjectV1Response.class
        );
    }
    /**
     * Retrieve actionable elements for the Ezsignfolder
     * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderGetActionableElements
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetActionableElements ezsignfolderGetActionableElementsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetActionableElements) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetActionableElements.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s Ezsigndocuments
     * 
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderGetEzsigndocumentsV1R
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetEzsigndocumentsV1R ezsignfolderGetEzsigndocumentsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetEzsigndocumentsV1R) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetEzsigndocumentsV1R.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s Ezsignfoldersignerassociations
     * 
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderGetEzsignfoldersigner
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetEzsignfoldersigner ezsignfolderGetEzsignfoldersignerassociationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetEzsignfoldersigner) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetEzsignfoldersigner.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder\&#39;s forms data
     * 
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderGetFormsDataV1Respons
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetFormsDataV1Respons ezsignfolderGetFormsDataV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetFormsDataV1Respons) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'application/zip' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetFormsDataV1Respons.class
        );
    }
    /**
     * Retrieve Ezsignfolder list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|\n| eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed|\n| eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return OASEzsignfolderGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetListV1Response ezsignfolderGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetListV1Response) client.invoke(
            'GET', '/1/object/ezsignfolder/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderGetObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetObjectV1Response ezsignfolderGetObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetObjectV1Response) client.invoke(
            'GET', '/1/object/ezsignfolder/{pkiEzsignfolderID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetObjectV1Response.class
        );
    }
    /**
     * Retrieve an existing Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @return OASEzsignfolderGetObjectV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderGetObjectV2Response ezsignfolderGetObjectV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderGetObjectV2Response) client.invoke(
            'GET', '/2/object/ezsignfolder/{pkiEzsignfolderID}', '',
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASEzsignfolderGetObjectV2Response.class
        );
    }
    /**
     * Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderImportEzsignfoldersig  (required)
     * @return OASEzsignfolderImportEzsignfoldersig
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderImportEzsignfoldersig ezsignfolderImportEzsignfoldersignerassociationsV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderImportEzsignfoldersig'), 'oaSEzsignfolderImportEzsignfoldersig');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderImportEzsignfoldersig) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations',
            (OASEzsignfolderImportEzsignfoldersig) params.get('oaSEzsignfolderImportEzsignfoldersig'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderImportEzsignfoldersig.class
        );
    }
    /**
     * Import an Ezsigntemplatepackage in the Ezsignfolder.
     * This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.\n\nThis allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderImportEzsigntemplatep  (required)
     * @return OASEzsignfolderImportEzsigntemplatep
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderImportEzsigntemplatep ezsignfolderImportEzsigntemplatepackageV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderImportEzsigntemplatep'), 'oaSEzsignfolderImportEzsigntemplatep');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderImportEzsigntemplatep) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage',
            (OASEzsignfolderImportEzsigntemplatep) params.get('oaSEzsignfolderImportEzsigntemplatep'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderImportEzsigntemplatep.class
        );
    }
    /**
     * Reorder Ezsigndocuments in the Ezsignfolder
     * 
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderReorderV1Request  (required)
     * @return OASEzsignfolderReorderV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderReorderV1Response ezsignfolderReorderV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderReorderV1Request'), 'oaSEzsignfolderReorderV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderReorderV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder',
            (OASEzsignfolderReorderV1Request) params.get('oaSEzsignfolderReorderV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderReorderV1Response.class
        );
    }
    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderSendV1Request  (required)
     * @return OASEzsignfolderSendV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderSendV1Response ezsignfolderSendV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderSendV1Request'), 'oaSEzsignfolderSendV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderSendV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/send',
            (OASEzsignfolderSendV1Request) params.get('oaSEzsignfolderSendV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderSendV1Response.class
        );
    }
    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param pkiEzsignfolderID  (required)
     * @param oaSEzsignfolderSendV2Request  (required)
     * @return OASEzsignfolderSendV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderSendV2Response ezsignfolderSendV2(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('oaSEzsignfolderSendV2Request'), 'oaSEzsignfolderSendV2Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderSendV2Response) client.invoke(
            'POST', '/2/object/ezsignfolder/{pkiEzsignfolderID}/send',
            (OASEzsignfolderSendV2Request) params.get('oaSEzsignfolderSendV2Request'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderSendV2Response.class
        );
    }
    /**
     * Unsend the Ezsignfolder
     * Once an Ezsignfolder has been sent to signatories, it cannot be modified.\n\nUsing this endpoint, you can unsend the Ezsignfolder and make it modifiable again.\n\nSignatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.\n\n⚠️ Warning: Any signature previously made by signatories on &quot;Non-completed&quot; Ezsigndocuments will be lost.
     * @param pkiEzsignfolderID  (required)
     * @param body  (required)
     * @return OASEzsignfolderUnsendV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEzsignfolderUnsendV1Response ezsignfolderUnsendV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiEzsignfolderID'), 'pkiEzsignfolderID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEzsignfolderUnsendV1Response) client.invoke(
            'POST', '/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiEzsignfolderID' => (Integer) params.get('pkiEzsignfolderID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASEzsignfolderUnsendV1Response.class
        );
    }
}
