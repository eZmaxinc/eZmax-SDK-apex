/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASObjectWebhookApi {
    OASClient client;

    public OASObjectWebhookApi(OASClient client) {
        this.client = client;
    }

    public OASObjectWebhookApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param oaSWebhookCreateObjectV1Request  (required)
     * @return OASWebhookCreateObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookCreateObjectV1Response webhookCreateObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSWebhookCreateObjectV1Request'), 'oaSWebhookCreateObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookCreateObjectV1Response) client.invoke(
            'POST', '/1/object/webhook',
            (OASWebhookCreateObjectV1Request) params.get('oaSWebhookCreateObjectV1Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASWebhookCreateObjectV1Response.class
        );
    }
    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @return OASWebhookDeleteObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookDeleteObjectV1Response webhookDeleteObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiWebhookID'), 'pkiWebhookID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookDeleteObjectV1Response) client.invoke(
            'DELETE', '/1/object/webhook/{pkiWebhookID}', '',
            query, form,
            new Map<String, Object>{
                'pkiWebhookID' => (Integer) params.get('pkiWebhookID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASWebhookDeleteObjectV1Response.class
        );
    }
    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @param oaSWebhookEditObjectV1Request  (required)
     * @return OASWebhookEditObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookEditObjectV1Response webhookEditObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiWebhookID'), 'pkiWebhookID');
        client.assertNotNull(params.get('oaSWebhookEditObjectV1Request'), 'oaSWebhookEditObjectV1Request');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookEditObjectV1Response) client.invoke(
            'PUT', '/1/object/webhook/{pkiWebhookID}',
            (OASWebhookEditObjectV1Request) params.get('oaSWebhookEditObjectV1Request'),
            query, form,
            new Map<String, Object>{
                'pkiWebhookID' => (Integer) params.get('pkiWebhookID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASWebhookEditObjectV1Response.class
        );
    }
    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID  (required)
     * @param eWebhookHistoryinterval The number of days to return (required)
     * @return OASWebhookGetHistoryV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookGetHistoryV1Response webhookGetHistoryV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiWebhookID'), 'pkiWebhookID');
        client.assertNotNull(params.get('eWebhookHistoryinterval'), 'eWebhookHistoryinterval');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eWebhookHistoryinterval', (String) params.get('eWebhookHistoryinterval')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookGetHistoryV1Response) client.invoke(
            'GET', '/1/object/webhook/{pkiWebhookID}/getHistory', '',
            query, form,
            new Map<String, Object>{
                'pkiWebhookID' => (Integer) params.get('pkiWebhookID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASWebhookGetHistoryV1Response.class
        );
    }
    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:\n\n| Variable | Valid values |\n|---|---|\n| eWebhookModule | Ezsign&lt;br&gt;Management |\n| eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted |\n| eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return OASWebhookGetListV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookGetListV1Response webhookGetListV1(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('eOrderBy', (String) params.get('eOrderBy')));
        query.addAll(client.makeParam('iRowMax', (Integer) params.get('iRowMax')));
        query.addAll(client.makeParam('iRowOffset', (Integer) params.get('iRowOffset')));
        query.addAll(client.makeParam('sFilter', (String) params.get('sFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookGetListV1Response) client.invoke(
            'GET', '/1/object/webhook/getList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Accept-Language' => (OASHeaderAcceptLanguage) params.get('acceptLanguage')
            },
            new List<String>{ 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASWebhookGetListV1Response.class
        );
    }
    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @return OASWebhookGetObjectV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookGetObjectV1Response webhookGetObjectV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiWebhookID'), 'pkiWebhookID');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookGetObjectV1Response) client.invoke(
            'GET', '/1/object/webhook/{pkiWebhookID}', '',
            query, form,
            new Map<String, Object>{
                'pkiWebhookID' => (Integer) params.get('pkiWebhookID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'Authorization' },
            OASWebhookGetObjectV1Response.class
        );
    }
    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID  (required)
     * @param body  (required)
     * @return OASWebhookTestV1Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWebhookTestV1Response webhookTestV1(Map<String, Object> params) {
        client.assertNotNull(params.get('pkiWebhookID'), 'pkiWebhookID');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWebhookTestV1Response) client.invoke(
            'POST', '/1/object/webhook/{pkiWebhookID}/test',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'pkiWebhookID' => (Integer) params.get('pkiWebhookID')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Authorization' },
            OASWebhookTestV1Response.class
        );
    }
}
